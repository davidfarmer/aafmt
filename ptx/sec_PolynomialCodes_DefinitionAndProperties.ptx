<section xml:id="sec_PolynomialCodes_DefinitionAndProperties">
  <title>Polynomial Codes: definition and basic properties</title>
  <p>
    In <xref ref="sec_PolynomialCodes_CoefficientsInZ2">Section</xref>
    we mentioned that any polynomial in
    <m>\mathbb{Z}_2[x]</m> can be written as a binary <m>n</m>-tuple:
    for example, the polynomial
    <m>x^6 + x^4 + x</m> would be represented as
    <m>(1010010)</m> . Notice that in the <m>n</m>-tuple,
    the coefficient of the highest order term is on the <em>left</em>,
    and the coefficient of the lowest-order term written on the <em>right</em>.
    We did this because this is how you write polynomials in high school or college algebra.
    However, the reader should take note that many references on polynomial codes
    <em>reverse</em> this order,
    and list the lowest-order coefficient on the <em>left</em>.
  </p>
  <p>
    Now we'll turn the relationship around.
    Any list or vector of binary digits,
    similar to the code words in the previous section,
    can be represented as a polynomial.
    For example <m>(101101)</m> can be represented as the polynomial <m>1x^5 + 0x^4 + 1x^3 + 1x^2 + 0x + 1 = x^5 + x^3 + x^2 + 1</m>.
  </p>
  <exercise>
    <statement>
      <p>
        Suppose a vector contains 10 binary digits
        (binary digits are also referred to as <term>bits</term>).
        <ol type="a">
          <li>
            <p>
              What is the highest possible degree of the polynomial corresponding to the vector?
            </p>
          </li>
          <li>
            <p>
              If the degree of the corresponding polynomial is 6, what can you say about the vector?
            </p>
          </li>
          <li>
            <p>
              If the corresponding polynomial has only even powers of <m>x</m>,
              what can you say about the vector?
            </p>
          </li>
        </ol>
      </p>
    </statement>
  </exercise>
  <p>
    Recall that we have defined a code of length <m>n</m>
    (or <m>n</m>-bit code)
    as a set of binary <m>n</m>-tuples.
    We can use polynomials to generate codes as shown in the following example.
  </p>
  <example>
    <statement>
      <p>
        Let <m>p(x) = x^3 + 1</m>.
        Consider all polynomials of degree <m>\le</m> 2: they are
        <me>
          0, 1, x, x+1, x^2, x^2+1, x^2 + x, x^2 + x + 1
        </me>.
      </p>
      <p>
        Take <m>p(x)</m> times each of these polynomials and represent the results as binary 6-tuples:
        <md>
          <mrow>0\cdot p(x))\amp =0x^5+0x^4+0x^3+0x^2+0x+0=(000000),</mrow>
          <mrow>1\cdot (p(x))\amp = x^3 + 1=(001001),</mrow>
          <mrow>x(p(x))\amp =x^4+x= (010010),</mrow>
          <mrow>x^2(p(x))\amp =x^5+x^2=(100100),</mrow>
          <mrow>(x+1)p(x)\amp =(010010)+(001001)=(011011),</mrow>
          <mrow>(x^2+1)p(x)\amp =(100100)+(001001)=(101101),</mrow>
          <mrow>(x^2+x)p(x)\amp =(100100)+(010010)=(110110), \textrm{and}</mrow>
          <mrow>(x^2+x+1)p(x)\amp =(100100)+(010010)+(001001)=(111111)</mrow>
        </md>.
      </p>
      <p>
        So we have the following set:
        <me>
          \begin{array}{cccc} (000000) \amp  (100100) \amp  (001001) \amp  (101101) \\ (010010) \amp  (110110) \amp  (011011) \amp  (111111). \end{array}
        </me>
      </p>
      <p>
        We call this set of codewords the code of length 6 (or 6-bit code) generated by <m>p(x)</m>.
      </p>
    </statement>
  </example>
  <p>
    We generalize this example with the following definition.
  </p>
  <definition>
    <statement>
      <p>
        {polynomialcode} Let <m>p(x)</m> be a polynomial of degree <m>d</m> with coefficients in
        <m>\mathbb{Z}_2</m> and <m>S</m> be the set of all polynomials in
        <m>\mathbb{Z}_2[x]</m> with degree <m>m</m> or less.
        The <em>polynomial code generated by <m>p(x)</m></em><idx><h>Polynomial code</h><h>generated by a polynomial</h></idx> <em>of length</em>
        <m>d+m+1</m> is the subset of
        <m>\mathbb{Z}_2^{d+m+1}</m> corresponding to the set of products of <m>p(x)</m> with each polynomial in <m>S</m>.
      </p>
    </statement>
  </definition>
  <exercise>
    <statement>
      <p>
        Find the 7-bit codes generated by the following polynomials.
        <ol type="a">
          <li>
            <p>
              <m>x^5 + x^3 + x^2 + 1</m>
            </p>
          </li>
          <li>
            <p>
              <m>x^4 + x^3 + x</m>
            </p>
          </li>
          <li>
            <p>
              <m>x^5 + x^4 + x^2 + x</m>
            </p>
          </li>
          <li>
            <p>
              <m>x^4 + x^2</m>
            </p>
          </li>
        </ol>
      </p>
    </statement>
  </exercise>
  <exercise>
    <statement>
      <p>
        Find the 5-bit codes generated by each of the following polynomials:
        <ol type="a">
          <li>
            <p>
              <m>x + 1</m>
            </p>
          </li>
          <li>
            <p>
              <m>x^3+x+1</m>
            </p>
          </li>
          <li>
            <p>
              <m>x^2 + x</m>
            </p>
          </li>
        </ol>
      </p>
    </statement>
  </exercise>
  <p>
    In our previous discussion of binary codes in <xref ref="ErrorAndCorrectionCode">Chapter</xref>,
    we made a big deal about <em>linear codes</em>.
    Recall that a linear code is a code that is closed under addition:
  </p>
  <exercise xml:id="exercise_PolynomialCodes_lincode">
    <statement>
      <p>
        Show that the following code is a linear code
        <me>
          \{(0000),(1010),(0101),(1111)\}
        </me>
      </p>
    </statement>
  </exercise>
  <p>
    Notice that in <xref ref="exercise_PolynomialCodes_lincode">Exercise</xref>,
    we used the cyclic polynomial code from <xref ref="example_PolynomialCodes_cyclic_poly">Example</xref>.
    Therefore it is possible for a polynomial code to be a linear code.
    But are all polynomial codes linear codes?
    That's the million-dollar question.
    Let's explore a bit:
  </p>
  <exercise>
    <statement>
      <p>
        Let <m>p(x) = x^3 + x + 1</m>,
        let <m>G_1</m> be the set of 6-tuples that are multiples of <m>p(x)</m>.
        <ol type="a">
          <li>
            <p>
              Show that <m>(100111)</m> and
              <m>(010110)</m> are multiples of <m>p(x)</m>.
            </p>
          </li>
          <li>
            <p>
              Show that <m>(100111)+(010110)</m>is a multiple of <m>p(x)</m>.
              (Here <sq>+</sq> is in the sense of <m>\mathbb{Z}_2[x]</m>.)
            </p>
          </li>
          <li>
            <p>
              Show that the polynomial code consisting of multiples of <m>p(x)</m> is a linear code
              (that is, it is closed under addition).
            </p>
          </li>
        </ol>
      </p>
    </statement>
  </exercise>
  <p>
    The preceding exercise is not a general proof,
    but it is possible to generalize the method used to show that polynomial codes are indeed linear codes.
    It's actually not difficult to obtain the generator matrix for a given polynomial code,
    as the following example shows.
  </p>
  <example>
    <statement>
      <p>
        Consider the <m>(6,3)</m> code corresponding to the polynomial <m>x^3+1</m>.
        We therefore have
        <md>
          <mrow>\amp 1 \text{ encodes as } x^3+1,</mrow>
          <mrow>\amp x \text{ encodes as } x^4+x,</mrow>
          <mrow>\amp x^2 \text{ encodes as } x^5+x^2</mrow>
        </md>.
      </p>
      <p>
        All of the above polynomials also have <m>n</m>-tuple representations.
        Using <m>n-tuples</m>, the same encoding information can be written as
        <me>
          \begin{array}{rcl} (001) \amp  \mapsto \amp  (001001),  \\ (010) \amp  \mapsto \amp  (010010) , \\ (100) \amp  \mapsto \amp  (100100). \end{array}
        </me>
      </p>
      <p>
        To obtain the generator matrix,
        we simply write the codewords for <m>(100), (010)</m>,
        and <m>(001)</m> as column vectors next to each other.
        <me>
          \begin{pmatrix}1 \amp  0 \amp  0\\ 0 \amp  1 \amp  0\\ 0 \amp  0 \amp  1\\ 1 \amp  0 \amp  0\\ 0 \amp  1 \amp  0\\ 0 \amp  0 \amp  1 \end{pmatrix}
        </me>
      </p>
      <p>
        Since the smallest weight of any of the nonzero codewords is 2, this code has the ability to detect all single errors.
      </p>
    </statement>
  </example>
  <exercise>
    <statement>
      <p>
        Give the generator matrix for the codes generated by the following polynomials.
        <ol type="a">
          <li>
            <p>
              The (5,3) code generated by <m>x^2 + x</m>.
            </p>
          </li>
          <li>
            <p>
              The (7,4) code generated by <m>x^3 + x</m>.
            </p>
          </li>
          <li>
            <p>
              The (9,5) code generated by <m>x^4 + x^2 + 1</m>.
            </p>
          </li>
        </ol>
      </p>
    </statement>
  </exercise>
  <p>
    We now have enough information to approach the question of when a polynomial code is a cyclic code.
    We must first define a cyclic shift in terms of polynomials.
    We understand to perform a cyclic shift on an <m>n</m>-tuple,
    we just take the left most digit in the <m>n</m>-tuple and put it on the right of the <m>n</m>-tuple.
    <m>(1011)</m> would turn into <m>(0111)</m>.
    However moving the terms of a polynomial does not change its value.
    In this case we have to multiply the whole polynomial by <m>x</m> to shift the terms up a degree,
    but there is an additional step needed to move the highest term to the lowest.
    To do this, we have to use modular polynomial division.
  </p>
  <example>
    <statement>
      <p>
        The <m>n</m>-tuple (0111) when cyclically shifted once,
        results in (1110).
        So the polynomial <m>p(x) = x^2 + x + 1</m> when cyclically shifted once is <m>x^3 + x^2 + x</m>.
        When we multiply <m>p(x)</m> by <m>x</m>,
        we get <m>x^3 + x^2 + x</m>.
        In this case, multiplication by <m>x</m> gives the cyclic shift.
      </p>
      <p>
        The <m>n</m>-tuple (1011) when cyclically shifted once results in (0111).
        So the polynomial <m>p(x) = x^3 + x + 1</m> when cyclically shifted once is <m>x^2 + x + 1</m>.
        We multiply <m>p(x)</m> by <m>x</m> to yield <m>xp(x) = x^4 + x^2 + x</m>,
        which is not the same codeword as (0111).
        Therefore, we must divide by <m>x^4 + 1</m>.
        <me>
          x^4 + x^2 + x = 1\cdot (x^4 + 1) + (x^2 + x - 1)
        </me>
        and the last term <m>-1</m> gets taken <m>\pmod 2</m> to yield.
        <me>
          x^2 + x + 1
        </me>
      </p>
      <p>
        Which is the same as the <m>n</m>-tuple (1110).
      </p>
    </statement>
  </example>
  <proposition xml:id="proposition_PolynomialCodes_cyclicremainder">
    <statement>
      <p>
        A cyclic shift of a <m>n</m>-bit polynomial codeword <m>p(x)</m> is the same as multiplying the codeword <m>p(x)</m> by <m>x</m> then taking the remainder after dividing by <m>x^n + 1</m>.
      </p>
    </statement>
  </proposition>
  <proof>
    <p>
      <term> Case 1:</term> The polynomial codeword has a degree of less than <m>n-1</m>.
      In this case, a polynomial of the form
      <m>p(x)= 0x^{n-1} + a_{n-2}x^{n-2} + a_{n-3}x^{n-3} \cdots + a_{1}x + a_0</m> where <m>a_n \in \mathbb{Z}_2</m>,
      when multiplied by <m>x</m> would result in
      <m>xp(x)=a_{n-2}x^{n-1} + a_{n-3}x^{n-2} \cdots + a_1x^2 + a_{0}x + 0</m> Which is the cyclically shifted code word.
      Then when taking the remainder after division by <m>x^n + 1</m>,
      we notice that the degree of <m>x^n + 1</m> is larger than <m>xp(x)</m>,
      so the quotient must be 0 and the remainder will be <m>xp(x)</m>.
    </p>
    <p>
      <term> Case 2:</term> The polynomial codeword has a degree equal to <m>n-1</m>.
      In this case,
      a polynomial of the form <m>p(x)= a_{n-1}x^{n-1} + a_{n-2}x^n-2 + a_{n-3}x^n-3 \cdots + a_{1}x + a_0</m>,
      where <m>a_n \in \mathbb{Z}_2</m>,
      when multiplied by <m>x</m> would result in <m>xp(x)=a_{n-1}x^n + a_{n-2}x^{n-1} \cdots + a_1x^2 + a_{0}x + 0</m>.
      This is close to the cyclically shifted codeword,
      but has an <m>x^n</m> term that is not in any codeword.
      We then divide by <m>x^n + 1</m>,
      since both <m>xp(x)</m> and <m>x^n + 1</m> have a <m>x^n</m> term,
      the quotient is 1.
      Then taking the remainder will yield,
      <m>a_{n-2}x^{n-1} \cdots + a_1x^2 + a_{0}x - 1</m>.
      But remember we're doing arithmetic in <m>\mathbb{Z}_2</m>,
      so <m>-1 = 1</m>.
      Thus the remainder is <m>a_{n-2}x^{n-1} \cdots + a_1x^2 + a_{0}x + 1</m> which is the cyclically shifted codeword.
    </p>
  </proof>
  <exercise>
    <statement>
      <p>
        {cycShift} For the following polynomials,
        calculate their cyclic shift by multiplying by <m>x</m> then taking the remainder after division of <m>x^n + 1</m>.
        <ol type="a">
          <li>
            <p>
              <m>x^3 + x^2 + 1</m> where <m>n=4</m>
            </p>
          </li>
          <li>
            <p>
              <m>x^7 + x^4 + x^2</m> where <m>n=8</m>
            </p>
          </li>
          <li>
            <p>
              <m>x^9 + x^8 + x^7 + x^5 + x^4 +x^2 + 1</m> where <m>n=10</m>
            </p>
          </li>
        </ol>
      </p>
    </statement>
  </exercise>
  <proposition xml:id="proposition_PolynomialCodes_cyclicsum">
    <statement>
      <p>
        Any cyclic shift of <m>p(x)</m> can be written as a sum of <m>p(x) + q(x)(x^n + 1)</m>,
        where <m>p(x)</m> is a codeword and <m>q(x)</m> is some polynomial.
      </p>
    </statement>
  </proposition>
  <proof>
    <p>
      Given a <m>n</m>-bit codeword <m>p(x)</m>,
      the cyclic shift of <m>p(x)</m> is calculated by
      <m>xp(x) = q(x)(x^n + 1) + r(x)</m> where <m>q(x)</m> is some polynomial and <m>r(x)</m> is a polynomial of degree less than <m>n</m>.
      Simply subtract <m>q(x)(x^n + 1)</m> from both sides to yield <m>xp(x) - q(x)(x^n + 1) = r(x)</m>.
    </p>
  </proof>
  <p>
    We next introduce the notion of a complete polynomial,
    which resembles the idea of a generator of a cyclic group.<fn>
    In fact, a complete polynomial IS the generator of a group of nonzero polynomials under multiplication.
    </fn>
  </p>
  <definition>
    <statement>
      <p>
        {defn:Completepolynomials} A<term> complete polynomial</term>
            <idx><h>Complete polynomials</h></idx>
        is a polynomial <m>f(x)\in \mathbb{Z}_2[x]</m> of degree <m>n</m> such that for every nonzero polynomial
        <m>g(x)\in \mathbb{Z}_2[x]</m> of degree <m>n</m> or less,
        there exists a positive integer <m>k</m> such that
        <m>g(x)-x^k</m> is divisible by <m>f(x)</m>.
      </p>
    </statement>
  </definition>
  <example>
    <statement>
      <p>
        The polynomial <m>x^3 + x + 1</m> is complete.
        First, we set the equation equal to 0.
        <m>x^3 + x + 1=0</m> Add <m>x+1</m> from both sides to yield:
        <m>x^3 = x+1</m>.
        (Remember, addition is the same as subtraction in <m>\mathbb{Z}_2[x]</m>.)
        Multiply by <m>x</m> to get
        <me>
          x^4 = x^2 + x
        </me>,
        and again to get
        <me>
          x^5 = x^3 + x^2
        </me>.
      </p>
      <p>
        Now substitute <m>x+1</m> for <m>x^3</m> to get <m>x^5 = x + 1 + x^2</m>.
        Multiply again by <m>x</m> to yield.
        <me>
          x^6 = x^3 + x^2 + x
        </me>,
        and substitute again for <m>x^3</m> to get (after some algebra)
        <me>
          x^6 = x^2 + 1
        </me>
      </p>
      <p>
        Multiply once more by <m>x</m> to get <m>x^7 = x^3 + x = 1</m>.
      </p>
      <p>
        So if we list the possible polynomials of degree 2 or less,
        each is paired to a power of <m>x</m>.
        <me>
          \begin{array}{lcr} x^0 \amp  = \amp  1 \\ x^1 \amp  = \amp  x \\ x^2 \amp  = \amp  x^2 \\ x^3 \amp  = \amp  x+1 \\ x^4 \amp  = \amp  x^2 + x \\ x^5 \amp  = \amp  x^2 + x + 1 \\ x^6 \amp  = \amp  x^2 + 1 \\ x^7 \amp  = \amp  1 \end{array}
        </me>
      </p>
      <p>
        Therefore the polynomial <m>x^3 + x + 1</m> is complete for polynomials of degree 2 or smaller.
      </p>
    </statement>
  </example>
  <p>
    With these properties in place,
    we can now show how to generate a cyclic code with polynomials.
  </p>
  <example>
    <statement>
      <p>
        Let <m>p(x)</m> be <m>x+1</m> and
        <m>f(x) = x^5 + 1</m> be a polynomial to be encoded.
        The product of the two would be the codeword <m>f(x)p(x) = x^6 + x^5 + x + 1</m>.
        To cycle the codeword left, we would need to multiply by <m>x</m>.
        This would yield <m>x^7 + x^6 + x^2 + x</m>.
        However, since this is a 7-bit code,
        there is no place for an <m>x^7</m> term.
        So we need to shift the <m>x^7</m> term to an <m>x^0</m> term.
        This is done by taking the remainder after dividing by <m>x^7+1</m>.
      </p>
      <p>
        <m>x^7 + 1</m> goes into <m>x^7 + x^6 + x^2 + x</m> once,
        this cancels the <m>x^7</m> term and has <m>x^6 + x^2 + x - 1</m> as the remainder,
        but remember that this operation is done <m>\pmod 2</m> so the remainder is <m>x^6 + x^2 + x - 1</m>.
        <m>x^7 + 1</m> does not divide any further as all the remaining terms are of a lesser degree.
        This new term we can then divide by <m>x+1</m> to show that it is in the code.
        <m>x+1</m> goes into <m>x^6 + x^2 + x + 1</m> exactly <m>x^5 + x^4 + x^3 + x^2 + 1</m> times <m>\pmod2</m>.
        We can continue multiplying by <m>x</m> and taking the remainder after division by <m>x^7 + 1</m> to generate additional codewords.
      </p>
      <p>
        So for the 7-bit polynomial code generated to be cyclic,
        <m>p(x)</m> must divide <m>x^7 + 1</m>.
        Using polynomial division we can show that <m>x^7 = (x+1)(x^6-x^5+x^4-x^3+x^2-x+1) + 0</m>.
        So <m>p(x)</m> divides any product of <m>x^7+1</m>.
      </p>
      <p>
        We can show that <m>x+1</m> divides <m>x^n + 1</m>.
        First lets show that <m>p(x)</m> divides <m>x^2 + 1</m>.
        <m>(p(x))^2 = x^2 + 2x + 1</m>,
        but remember <m>2x = 0</m> in
        <m>\mathbb{Z}_2</m> so <m>(p(x))^2 = x^2 + 1</m>.
        Likewise we can show that <m>x+1</m> divides <m>x^3 + 1</m>.
        Using polynomial multiplication,
        we can show that <m>(x+1)(x^2 -x + 1) = (x^3 + 1)</m>.
        However we need to show that <m>x+1</m> divides <m>x^n+1</m> for any <m>n</m>.
      </p>
    </statement>
  </example>
  <proposition>
    <statement>
      <p>
        If a polynomial <m>p(x)</m> divides <m>x^n + 1</m>,
        then the <m>n</m>-bit polynomial code generated by <m>p(x)</m> is cyclic.
      </p>
    </statement>
  </proposition>
  <proof>
    <p>
      Let <m>C</m> be the code generated by <m>p(x)</m>,
      and let <m>f(x)</m> be an arbitrary codeword in <m>C</m>.
      Then by <xref ref="definition_PolynomialCodes_polynomialcode">Definition</xref>,
      <m>f(x)= a(x)p(x)</m>.
      Let <m>g(x)</m> be the cyclic shift of <m>f(x)</m> by <m>1</m>.
      By <xref ref="proposition_PolynomialCodes_cyclicremainder">Proposition</xref>,
      <m>g(x)</m> is the remainder of <m>xf(x)</m> when divided by <m>x^n+1</m>.
      By <xref ref="proposition_PolynomialCodes_cyclicsum">Proposition</xref>,
      <m>g(x)=xf(x) + q(x)(x^n + 1)</m>.
      Since <m>p(x)</m> divides <m>x^n+1</m>,
      then <m>x^n+1=s(x)p(x)</m>.
      By substitution,
      <m>g(x)=xa(x)p(x) + q(x)s(x)p(x)=p(x)\bigg(xa(x)+ q(x)s(x)\bigg)</m>.
      Therefore, <m>g(x)</m> is a multiple of <m>p(x)</m>:
      in other words,
      <m>g(x)</m> is in the code generated by <m>p(x)</m>,
      which is none other than <m>C</m>.
      We have thus shown that any cyclic shift of an arbitrary codeword in <m>C</m> is also in <m>C</m>.
      This is exactly what it means for the code <m>C</m> to be a cyclic code.
      Thus the proposition is proved.
    </p>
  </proof>
</section>