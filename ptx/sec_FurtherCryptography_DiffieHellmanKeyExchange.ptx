<section xml:id="sec_FurtherCryptography_DiffieHellmanKeyExchange">
  <title>Diffie-Hellman key exchange</title>
  <introduction>
    <p>
      In order to share a private message over a public domain a sender must "lock" or encrypt their message using a <em>key</em>.
          <idx><h>key</h><h>in cryptogaphy</h></idx>
      Recall from <xref ref="sec_Cryptography_Overview">Section</xref>,
      that in cryptography a key is a special piece of information
      (usually a number)
      that is required to encrypt and decrypt data which is shared between the sender and receiver.
      There are generally three types of keys used:
      public, private and symmetric keys.
      A <em>public key</em><idx><h>Public Key</h><h>in cryptography</h></idx> can be widely distributed,
      and is typically used for encrypting messages.
      For a public key to be effective,
      there must be a matching <em>private key</em><idx><h>Private Key</h><h>in cryptography</h></idx> which is known only to the receiver.
      The private key can be used to decrypt the messages created using the public key.
      Finally, a <em>symmetric key</em><idx><h>Symmetric Key</h><h>in cryptography</h></idx> is known by the sender and receiver,
      and is used to both encypt and decrypt messages.
      Not all cryptosystems require all three kinds of keys,
      but every cryptosystem must have either a private key or a symmetric key.
    </p>
    <p>
      If a symmetric key is used,
      then both parties must share their key before they can begin communicating securely.
      The requirement of establishing a key exchange is so essential that it is embedded into almost every technology we use today.
      Some examples of key exchange can be seen in media applications,
      cell phones, banking, online purchasing, and emails.
    </p>
    <p>
      But what if the only way the two parties have to communicate is via a public network
      (such as the Internet),
      where eavesdroppers can listen in?
      Under these conditions how can they possibly establish a shared key in such a way that no one else can find out?
      The Diffie Hellman key exchange (DHKE) is one possible solution to the problem of creating a secret key over an insecure communication channel.
      Note that the DHKE is not used for encryption/decryption of messages,
      but only to establish a key that can be used to encrypt/decrypt subsequent messages.
      Follow the steps below to see the DHKE process.
      <ol type="Step1">
        <li>
          <p>
            First, Moses and Rachael agree upon a pair of numbers <m>p</m> and <m>g</m>.
            <m>p</m> is called the <term>modulus</term>,while <m>g</m> is called the <term>base</term>.
            These numbers are not secret,
            but Moses and Rachael do not care if eavesdroppers find out what <m>p</m> and <m>g</m> are.
            In practice,
            <m>p</m> and <m>g</m> are required to have certain properties
            (as explained below)
            to maximize secrecy.
            However, the DHKE procedure still works for any values of <m>p</m> and <m>g</m>.
          </p>
        </li>
        <li>
          <p>
            Moses chooses a secret integer <m>n</m>, known only to himself.
            He then computes <m>q</m> where <m>q =\bmod(g^n,p)</m>,
            and sends Rachael the value of <m>q</m>.
            Rachael does not need to know the value of <m>n</m>.
          </p>
        </li>
        <li>
          <p>
            Rachael similiarly chooses her own secret integer <m>m</m>,
            computes <m>r</m> where <m>r =\bmod(g^m,p)</m> and sends Moses the value of <m>r</m>.
          </p>
        </li>
        <li>
          <p>
            Moses computes <m>\bmod (r^n , p ) = k_M</m>;
          </p>
        </li>
        <li>
          <p>
            Rachael computes <m>\bmod (q^m , p ) = k_R</m>;
          </p>
        </li>
      </ol>
    </p>
    <p>
      It turns out that when <m>k_R</m> and <m>k_M</m> are computed by the above procedure,
      then <m>k_R</m> is always equal to <m>k_M</m>.
      You will show this in the next exercise.
    </p>
    <figure xml:id="fig_DH_DHKE_1">
      <caption>Key exchange between Moses and Rachael using DHKE</caption>
      <image width="84%" source="images/DHKE_1.png"/>
    </figure>
    <exercise xml:id="exercise_FurtherCryptography_k1isk2">
      <statement>
        <p>
          Fill in the blanks in the following proof that <m>k_R</m> is always equal to <m>k_M</m>.
        </p>
      </statement>
      <proof>
        <md>
          <mrow>k_R \amp =   \bmod (q^m , \underline{~~~~~~}) \amp \amp  \text{ (definition of \(k_M\)) }</mrow>
          <mrow>\amp \equiv \bmod ((g^{\underline{~~~~~~}})^m , p) \amp \amp   \text{ (substitution) }</mrow>
          <mrow>\amp \equiv \bmod ((g^{\underline{~~~~~~}})^n , p) \amp \amp   \text{ (rules of exponents) }</mrow>
          <mrow>\amp \equiv \bmod ((r^{\underline{~~~~~~}}) , p) \amp \amp   \text{ (substitution) }</mrow>
          <mrow>\amp = k_M</mrow>
        </md>
        <p>
          If two numbers in <m>\mathbb{Z}_p</m> are modular equivalent,
          then they are the same number.
          Thus, <m>k_R = k_M</m> is a symmetric key,
          which we may refer to as <m>k</m>.
        </p>
      </proof>
    </exercise>
    <p>
      Now that you understand the process for DHKE, follow the example below.
      (Note that this example is just to give you the idea<ndash/>it's much too simple to use in practical applications.)
    </p>
    <example>
      <statement>
        <p>
          Key exchange between a sender and receiver (Moses and Rachael) using the DHKE is shown in the following steps.
          <ol type="Step1">
            <li>
              <p>
                Prior to sending data, Moses and Rachael agree <m>p</m> = 13 and <m>g</m>= 7;
              </p>
            </li>
            <li>
              <p>
                Moses chooses <m>n</m> = 2, and sends Rachael <m>\bmod (7^2 , 13) = 10</m>;
              </p>
            </li>
            <li>
              <p>
                Rachael chooses <m>m</m> = 8, and sends Moses <m>\bmod (7^8 , 13) = 3</m>;
              </p>
            </li>
            <li>
              <p>
                Moses computes <m>\bmod ((3)^2 , 13 ) = 9</m>;
              </p>
            </li>
            <li>
              <p>
                Rachael computes <m>\bmod ((10)^8 , 13 ) = 9</m>;
              </p>
            </li>
          </ol>
        </p>
        <p>
          As a result of the exchange,
          both Moses and Rachel have obtained the same shared key,
          which is 9.
        </p>
      </statement>
    </example>
    <p>
      Following the example above you can see that the DHKE requires that you raise a given number <m>g</m> to a natural number
      (either <m>m</m> or <m>n</m>)
      and take the result mod <m>p</m>.
      This operation is called <term>discrete exponentiation</term>.
      Calculating discrete exponentials with small values of <m>m</m> or <m>n</m> is manageable,
      but in practice the exponent <m>m</m> or <m>n</m> can be enormous,
      with hundreds of digits.
      It would seem that in this case discrete exponentiation would take a long,
      long time to compute.
      But we can use the repeated squaring formula described in <xref ref="exercise_Cryptography_power">Section</xref> to speed up the process.
      Create a spreadsheet using the repeated squaring formula to compute the following exercises.
    </p>
    <exercise>
      <statement>
        <p>
          Suppose you want to conduct a DHKE with one person,
          and you are given <m>p</m> = 32452867;
          <m>g</m> = 54321; and <m>n</m> = 876.
          <ol type="a">
            <li>
              <p>
                What number do you send?
              </p>
            </li>
            <li>
              <p>
                You are then sent 31975948, what is the shared key?
              </p>
            </li>
            <li>
              <p>
                If <m>m</m> = 123 what number does the other party calculate for the shared key?
              </p>
            </li>
          </ol>
        </p>
      </statement>
    </exercise>
    <exercise>
      <statement>
        <p>
          Suppose you want to conduct a DHKE with one person,
          and you are given <m>p</m> = 86028157;
          <m>g</m> = 98765; and <m>n</m> = 123.
          <ol type="a">
            <li>
              <p>
                What number do you send?
              </p>
            </li>
            <li>
              <p>
                You are then sent 53161396, what is the shared key?
              </p>
            </li>
            <li>
              <p>
                If <m>m</m> = 87 what number does the other party calculate for the shared key?
              </p>
            </li>
          </ol>
        </p>
      </statement>
    </exercise>
    <p>
      Now that we understand the DHKE process,
      let us try to understand why it effectively guarantees the secrecy of the shared key.
      First, we need to understand a little more about the operation of discrete exponentiation, which
      (as we have seen)
      is the foundation of the DHKE process.
      So we are going on a short digression,
      but don't worry<ndash/>we will get back to the main point shortly.
    </p>
    <p>
      In previous math courses you learned that the inverse operation of exponentiation is taking the logarithm:
      for example, <m>2^3 = 8</m> while <m>\log_{2}8 = 3</m>.
      It is possible to do the same with discrete exponentiation:
      an inverse operation to discrete exponentiation is referred to as <sq>finding a
      <term>discrete logarithm</term> or (DL)</sq>.
      Note that since discrete exponentiation involves raising to a power which is a natural number,
      a DL will always be a natural number.
      For example, since <m>\bmod(2^5,7)=4</m>,
      we could say that under multiplication mod 7, <m>5</m> is a DL of <m>4</m> with base <m>2</m>.
    </p>
    <p>
      Now why have we been saying,
      <q><em>a</em> DL</q>
      rather than
      <q><em>the</em> DL</q>? Because there happens to be more than one:
    </p>
    <exercise xml:id="exercise_FurtherCryptography_DLex1">
      <statement>
        <ol type="a">
          <li>
            <p>
              Find all natural numbers <m>n</m> such that <m>\bmod(2^n,7)=4</m>.
              Use your result to complete the following sentence:
              <q>Under multiplication mod 7, the discrete logarithm(s) of <m>4</m> with base 2 are <ellipsis/>.</q>
            </p>
          </li>
          <li>
            <p>
              Find all natural numbers <m>n</m> such that <m>\bmod(2^n,7)=3</m>.
              Use your result to complete the following sentence:
              <q>Under multiplication mod 7, the discrete logarithm(s) of <m>3</m> with base 2 are <ellipsis/>.</q>
            </p>
          </li>
          <li>
            <p>
              Find all nonzero elements of
              <m>\mathbb{Z}_7 \setminus \{0\}</m> which have no discrete logarithms with base 2.
            </p>
          </li>
          <li>
            <p>
              Find all nonzero elements of
              <m>\mathbb{Z}_7 \setminus \{0\}</m> which have no discrete logarithms with base 3.
            </p>
          </li>
        </ol>
      </statement>
    </exercise>
    <p>
      The preceding exercise points out some key issues with discrete logarithms.
      Sometimes there are lots of them,
      and sometimes there aren't any!
      These phenomena are related to the one-to-oneness and ontoness properties of the discrete exponential function (recall <xref ref="definition_Functions_121defn">Definitions</xref>
      and <xref ref="definition_Functions_ontoDef"></xref>, respectively):
    </p>
    <exercise xml:id="exercise_FurtherCryptography_DLex2">
      <statement>
        <ol type="a">
          <li>
            <p>
              We may define a function <m>f: \mathbb{N} \rightarrow \mathbb{Z}_7 \setminus \{0\}</m> by the equation:
              <m>f(n) = \bmod(2^n,7)</m>.
              Use parts (a) and (b) of <xref ref="exercise_FurtherCryptography_DLex1">Exercise</xref>
              to prove that <m>f</m> is neither one-to-one nor onto.
            </p>
          </li>
          <li>
            <p>
              We may also define a function <m>g: \mathbb{N} \rightarrow \mathbb{Z}_7 \setminus \{0\}</m> by the equation:
              <m>g(n) = \bmod(3^n,7)</m>.
              Prove or disprove: <m>g</m> is one-to-one.
            </p>
          </li>
          <li>
            <p>
              With the same <m>g</m> as in part (b),
              prove or disprove: <m>g</m> is onto.
            </p>
          </li>
        </ol>
      </statement>
    </exercise>
    <p>
      This exercise suggests the following question: Under what conditions can we guarantee that the discrete exponentiation function is onto and/or one-to-one? (This turns out to be more than just an idle question,
      as we shall see shortly.) To gain some leverage against this problem,
      we will take advantage of <xref ref="proposition_Isomorphism_Up_cyclic">Proposition</xref>
      from <xref ref="Isomorphism">Chapter</xref>,
      which tells us that the multiplicative group <m>\mathbb{Z}_p\setminus \{0\}</m> is <em>cyclic</em>,
      whenever <m>p</m> is a prime. (In <xref ref="Isomorphism">Chapter</xref>
      we also used the notation <m>U(p)</m> instead of <m>\mathbb{Z}_p\setminus \{0\}</m>,
      and we will use this same notation in the following.) This means that for any prime <m>p</m>,
      there is a <m>g \in U(p)</m> such that <m>g</m> is a
      <em>generator</em> of <m>U(p)</m>:
      that is, <m>U(p) = \langle g \rangle</m>
      (recall from <xref ref="Groups">Chapter</xref> that for a finite group,
      <m>\langle g \rangle = \{g, g^2, g^3, \ldots \}</m>).
      A generator of <m>U(p)</m> is also referred to as a
      <term>primitive root</term> of <m>\mathbb{Z}_p</m>.
      Any element of <m>U(p)</m> may be expressed as a power of <m>g</m>
      (under mod <m>p</m> multiplication).
      In other words, the discrete exponentiation function
      <m>f: \mathbb{N} \rightarrow U(p)</m> given by <m>f(n) = \bmod(g^n,p)</m> is an onto function!
    </p>
    <p>
      It turns out that onto-ness also gives use one-to-oneness,
      when we restrict <m>f</m> to the appropriate domain:
    </p>
    <exercise>
      <statement>
        <p>
          Suppose that <m>p</m> is a prime,
          and <m>g</m> is a generator of <m>U(p)</m>.
          Consider the function <m>h: U(p) \rightarrow U(p)</m> given by <m>h(n) = \bmod(g^n,p)</m>.
          (Note that <m>h</m> is the same as <m>f</m> defined above,
          only the domain has been restricted.)
          Show that <m>h</m> is a bijection.
        </p>
      </statement>
    </exercise>
    <p>
      It's about time we got back to the main point of why we're talking about DL's in the first place.
      Suppose an eavesdropper who is listening in on Moses and Rachael's conversation wants to figure out the secret key <m>k</m>.
      The eavesdropper knows <m>p, g, q=\bmod(g^n,p)</m>,
      and <m>r=\bmod(g^m,p)</m>.
      If he could figure out <m>m</m> he could easily get the secret key by computing
      <m>\bmod(q^m,p)</m> which is equal to <m>k</m>.
      But finding <m>m</m> is just a DL problem,
      since <m>m</m> is a DL of <m>r</m> with base <m>g</m> under multiplication mod <m>p</m>.
    </p>
    <p>
      There is an issue that we should address here.
      We have pointed out that any DL problem has many different solutions.
      What if the eavesdropper finds a different solution to the DL problem,
      which is not equal to the <m>m</m> originally used by Rachael?
      It turns out that the eavesdropper can crack the code with
      <em>any</em> DL solution,
      as the following exercise shows:
    </p>
    <exercise xml:id="exercise_FurtherCryptography_DLex3">
      <statement>
        <p>
          Suppose that <m>m</m> and <m>m'</m> are two different DL's of <m>r</m> with base <m>g</m> under multiplication mod <m>p</m>.
          Show that <m>\bmod(g^{mn},p)=\bmod(g^{m'n},p)</m>.
          In other words, an eavesdropper can use <em>any</em>
          DL of <m>r</m> with base <m>g</m> under multiplication mod <m>p</m> to find the shared key.
        </p>
      </statement>
    </exercise>
    <exercise xml:id="exercise_FurtherCryptography_DLex4">
      <statement>
        <p>
          Suppose another eavesdropper was able to compute a DL of <m>q</m> with base <m>g</m> under multiplication mod <m>p</m>.
          Explain how she could use this information to find Moses and Rachael's secret shared key.
        </p>
      </statement>
    </exercise>
    <p>
      The security of the DHKE leverages the easy computation of the discrete exponentials versus the difficulty of computing DL's. (A function which is easy to compute but hard to invert is referred to as a
      <term>one-way function</term>.
      Discrete exponentials
      (for suitable <m>p</m>'s and <m>g</m>'s)
      form a very important class of one-way functions.) The following simple example introduces how this works in practice.
    </p>
    <example xml:id="example_FurtherCryptography_one-way">
      <statement>
        <p>
          It is easy to calculate <m>\bmod(2^{m},  11)</m> for different values of <m>m</m>:
          for example,
          when <m>m =8</m> then we get <m>\bmod(2^{8},  11) =\bmod(256,  11)  = 3</m>.
          However, when you try to invert the process, you have:
          given <m>\bmod(2^{m},  11) = 3</m>, calculate <m>m</m>.
          There is no easy way to do this.
          As you can see below the results jump around,
          and each solution is equally likely to be an integer between 0 and 11.
          <me>
            \bmod(2^{1}, 11)=2
          </me>
          <me>
            \bmod(2^{2}, 11)=4
          </me>
          <me>
            \bmod(2^{3}, 11)=8
          </me>
          <me>
            \bmod(2^{4}, 11)=5
          </me>
        </p>
        <me>
          \bmod(2^{5}, 11)=10
        </me>
        <me>
          \bmod(2^{6}, 11)=9
        </me>
        <me>
          \bmod(2^{7}, 11)=7
        </me>
        <me>
          \bmod(2^{8}, 11)=3
        </me>
        <me>
          \bmod(2^{9}, 11)=6
        </me>
        <me>
          \bmod(2^{10}, 11)=1
        </me>
      </statement>
    </example>
    <p>
      If you try to calculate <m>m</m> using a brute force method
      (that is, computing all possible solutions one at a time),
      you would have to calculate 8 different solutions before you find the right answer.
    </p>
    <p>
      The larger the modulus, the harder the DL is to find.
      The exercise below is designed to show how many computations a brute force attack would take in comparison to a growing modulus.
    </p>
    <exercise xml:id="exercise_FurtherCryptography_DLP">
      <statement>
        <p>
          Use the Repeated Square spreadsheet from <xref ref="exercise_Cryptography_power">Exercise</xref>
          to solve the following DL Problems.
          In each case,
          you will use the brute force method used in <xref ref="example_FurtherCryptography_one-way">Example</xref>,
          and write down how many discrete exponentials you need to compute in order to find the answer.
          <ol type="a">
            <li>
              <p>
                Given <m>\bmod(7^{m}, 41)=28</m>, solve for <m>m</m>.
              </p>
            </li>
            <li>
              <p>
                Given <m>\bmod(5^{m}, 73)=13</m>, solve for <m>m</m>.
              </p>
            </li>
            <li>
              <p>
                Given <m>\bmod(17^{m}, 211)=161</m>, solve for <m>m</m>.
              </p>
            </li>
            <li>
              <p>
                What trend do you see in the number of computations required in parts (a), (b), (c),
                and how does it relate to the moduli in the different cases?
              </p>
            </li>
          </ol>
        </p>
      </statement>
    </exercise>
    <p>
      From the foregoing discussion,
      we may see why it is important to choose a prime <m>p</m> as a modulus and a primitive root <m>g</m> as a base in an effective DHKE scheme.
      This choice will minimize duplicate DLs and create the largest search space possible for an eavesdropper.
      If you do not use a primitive root as a generator,
      then you will end up with a smaller subgroup of <m>U(p)</m> which will have an increased number of DLs, and an eavesdropper trying to calculate <m>m</m> using a brute force method is more likely to succeed.
    </p>
  </introduction>
  <subsection xml:id="subsec_FurtherCryptography_DiffieHellmanKeyExchange_MiddleAttack">
    <title>Man in the middle attack</title>
    <p>
      Our previous discussion indicates the DHKE is very hard to crack if it uses a large enough modulus <m>p</m> and a suitable base <m>g</m>.
      But, is there any way to successfully eavesdrop on Moses and Rachael's conversation without actually cracking the code?
      It seems that Moses and Rachael's security is assured,
      since an attacker would only be privy to
      <m>\bmod (g^n , p)</m> and <m>\bmod (g^m , p)</m>,
      each of which cannot be used to decrypt the message since an attacker would have to compute the DL problem to find <m>m</m> and <m>n</m>.
    </p>
    <figure xml:id="fig_DH_DHKE_2">
      <caption>MiM Attack during Moses and Rachael's key exchange</caption>
      <image width="93%" source="images/DHKE_18.png"/>
    </figure>
    <p>
      But not so fast.
      What would happen if an attacker, Fred
      (an eavesdropper)
      places himself between Moses and Rachael's messages?
      If Fred could do this then Rachael's message would pass through Fred first before reaching Moses,
      and vice-versa.
      Fred would then be able to intercept the public key and establish his own private keys with Moses and Rachael separately.
      Fred is now able to read or alter messages.
      This type of attack is commonly referred to as the Man in the Middle (MiM) attack.
      See <xref ref="fig_DH_DHKE_2">Figure</xref>
      to see how Fred is able to modify the key exchange.
    </p>
    <p>
      Following <xref ref="fig_DH_DHKE_2">Figure</xref>, Fred establishes one secret key <m>k_M</m> with Moses and a different secret key <m>k_R</m> with Rachael.
      Now Moses thinks <m>r_f</m> is Rachael's public key,
      and Rachael thinks that she has Moses' public key.
      Moses and Rachael both combine their private keys with Fred's public keys and create two different symmetric keys,
      <m>k_M</m> and <m>k_R</m> respectively.
      At this point if either Moses or Rachael sends a message,
      then Fred is free to decrypt and encrypt the message using the appropriate key.
    </p>
    <exercise>
      <statement>
        <p>
          Redo <xref ref="fig_DH_DHKE_2">Figure</xref>
          using different values of <m>p,
          g, n,m, f_n</m>, and <m>f_m</m>,
          remember to choose a prime for <m>p</m> and a primitive root for <m>g</m>
          (there are many primitive root calculators you can find online).
        </p>
      </statement>
    </exercise>
    <exercise>
      <statement>
        <p>
          Replace all the numbers in the formulas found in <xref ref="fig_DH_DHKE_2">Figure</xref> with letters,
          as seen in <xref ref="fig_DH_DHKE_1">Figure</xref>.
        </p>
      </statement>
    </exercise>
    <exercise>
      <statement>
        <p>
          Given <m>p=73</m>, and <m>g=11</m> find <m>q, r, r_f, q_f, k_M</m>,
          and <m>k_R</m> if Moses chooses <m>n=5</m>, Rachael chooses <m>m=4</m> and Fred chooses <m>f_M=3</m> and <m>f_R=2</m>.
        </p>
      </statement>
    </exercise>
    <p>
      DHKE is vulnerable to this type of MiM attack since Moses cannot verify that Rachael was the originator of the message,
      and vice-versa.
      Fortunately, MiM attacks can be prevented if messages are sent with a so-called
      <term>digital signature</term>
      which uniquely identifies the source of the message In <xref ref="sec_FurtherCryptography_DiffieHellmanKeyExchange">Section</xref>,
      we described how to send uniquely-identifiable messages by using a private key to encrypt messages that can be decrypted by a public key.
      So Moses may share his key with Rachael by encrypting his public key,
      together with some known text.
      Even if the MiM can receives and decode this information,
      there is no way for him
      (or her)
      to send a bogus key to Rachel,
      because (s)he does not know Moses' signature key.
    </p>
    <p>
      Diffie-Hellman is just one of many key exchange algorithms.
      In the next section,
      we will talk about a different key exchange method that is even more secure.
    </p>
  </subsection>
</section>