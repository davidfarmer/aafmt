<section xml:id="sec_ErrorAndCorrectionCode_EfficientDecoding">
  <title>Efficient Decoding</title>
  <introduction>
    <p>
      We are now at the stage where we are able to generate linear codes that detect and correct errors fairly easily.
      However, we haven't yet seen a good way to decode a received <m>n</m>-tuple that has some errors.
      The only thing we can do so far is compare the received <m>n</m>-tuple,
      to each possible codeword, and find the closest one.
      If the code is large, this may be very time-consuming.
    </p>
    <p>
      In the following subsections,
      we will explore two different decoding methods which are much efficient and practical.
    </p>
  </introduction>
  <subsection xml:id="subsec_ErrorAndCorrectionCode_EfficientDecoding_DecodeSyndromes">
    <title>Decoding using syndromes</title>
    <p>
      The following example introduces the notion of <em>syndrome</em>.
    </p>
    <example xml:id="example_ErrorAndCorrectionCode_Syndrome">
      <statement>
        <p>
          Given the binary matrix
          <me>
            H = \left( \begin{array}{ccccc} 1 \amp  1 \amp  1 \amp  0 \amp  0 \\ 0 \amp  1 \amp  0 \amp  1 \amp  0 \\ 1 \amp  0 \amp  0 \amp  0 \amp  1 \end{array} \right)
          </me>
          and the 5-tuples <m>{\bold x} = (11011)</m> and <m>{\bold y} = (01011)</m>,
          we can compute
          <me>
            H{\bold x} = \left( \begin{array}{c} 0 \\ 0 \\ 0 \end{array} \right)
          </me>
          and
          <me>
            H{\bold y} = \left( \begin{array}{c} 1 \\ 0 \\ 1 \end{array} \right)
          </me>.
        </p>
        <p>
          Hence, <m>{\bold x}</m> is a codeword and <m>{\bold y}</m> is not,
          since <m>{\bold x}</m> is in the null space and <m>{\bold y}</m> is not.
          Notice that <m>H{\bold x}</m> is identical to the first column of <m>H</m>.
          In fact, this is where the error occurred.
          If we flip the first bit in
          <m>{\bold y}</m> from 0 to 1, then we obtain <m>{\bold x}</m>.
        </p>
      </statement>
    </example>
    <p>
      It appears from this example that the vector
      <m>H{\bold x}</m> has special importance,
      so we create a special term for it:
    </p>
    <definition>
      <statement>
        <p>
          {syndomeOfx} If <m>H</m> is an
          <m>k \times n</m> matrix and <m>{\bold x} \in \mathbb{Z}_2^n</m>,
          then <m>H{\bold x}</m> is called the <term>syndrome</term>
              <idx><h>Syndrome of a code</h></idx>
          of <m>{\bold x}</m>
        </p>
      </statement>
    </definition>
    <p>
      The following proposition allows the quick detection and correction of errors.
    </p>
    <proposition xml:id="proposition_ErrorAndCorrectionCode_syndrome">
      <statement>
        <p>
          Let the <m>k \times n</m> binary matrix <m>H</m> determine a linear code and let
          <m>{\bold x}</m> be the received <m>n</m>-tuple.
          Write <m>{\bold x}</m> as <m>{\bold x} = {\bold c} +{\bold e}</m>,
          where <m>{\bold c}</m> is the transmitted codeword and
          <m>{\bold e}</m> is the transmission error.
          Then the syndrome <m>H{\bold x}</m> of the received codeword
          <m>{\bold x}</m> is also the syndrome of the error <m>{\bold e}</m>.
        </p>
      </statement>
    </proposition>
    <proof>
      <p>
        <m>H{\bold x} = H({\bold c} +{\bold e}) = H{\bold c} + H{\bold e} = {\bold 0} + H{\bold e} = H{\bold e}</m>.
      </p>
    </proof>
    <p>
      This proposition tells us that the syndrome of a received word depends solely on the error and not on the transmitted codeword.
      The proof of the following proposition follows immediately from <xref ref="proposition_ErrorAndCorrectionCode_syndrome">Proposition</xref>
      and from the fact that <m>H{\bold e}_j</m> is the <m>j</m>th column of the matrix <m>H</m>.
    </p>
    <proposition>
      <statement>
        <p>
          Let <m>H \in \mathbb{M}_{ k \times n} ( \mathbb{Z}_2)</m> and suppose that the linear code corresponding to <m>H</m> is single error-correcting.
          Let <m>{\bold r}</m> be a received <m>n</m>-tuple that was transmitted with at most one error.
          If the syndrome of <m>{\bold r}</m> is <m>{\bold 0}</m>,
          then no error has occurred;
          otherwise, if the syndrome of
          <m>{\bold r}</m> is equal to some column of <m>H</m>,
          say the <m>i</m>th column, then the error has occurred in the <m>i</m>th bit.
        </p>
      </statement>
    </proposition>
    <example>
      <statement>
        <p>
          Consider the matrix
          <me>
            H = \left( \begin{array}{cccccc} 1 \amp  0 \amp  1 \amp  1 \amp  0 \amp  0 \\ 0 \amp  1 \amp  1 \amp  0 \amp  1 \amp  0 \\ 1 \amp  1 \amp  1 \amp  0 \amp  0 \amp  1 \end{array} \right)
          </me>
          and suppose that the 6-tuples <m>{\bold x} = (111110)</m>,
          <m>{\bold y} = (111111)</m>, and <m>{\bold z} = (010111)</m> have been received
          (technically these are column vectors,
          but we write them as row vectors for convenience).
          Then
          <me>
            H{\bold x} = \left( \begin{array}{c} 1 \\ 1 \\ 1 \end{array} \right), H{\bold y} = \left( \begin{array}{c} 1 \\ 1 \\ 0 \end{array} \right), H{\bold z} = \left( \begin{array}{c} 1 \\ 0 \\ 0 \end{array} \right)
          </me>.
        </p>
        <p>
          Hence, <m>{\bold x}</m> has an error in the third bit and
          <m>{\bold z}</m> has an error in the fourth bit.
          The transmitted codewords for
          <m>{\bold x}</m> and <m>{\bold z}</m> must have been
          <m>(110110)</m> and <m>(010011)</m>, respectively.
          The syndrome of <m>{\bold y}</m> does not occur in any of the columns of the matrix <m>H</m>,
          so multiple errors must have occurred to produce<nbsp/><m>{\bold y}</m>.
        </p>
      </statement>
    </example>
    <exercise>
      <statement>
        <p>
          Let
          <me>
            H = \left( \begin{array}{ccccc} 0 \amp  1 \amp  1 \amp  1 \amp  1 \\ 0 \amp  0 \amp  0 \amp  1 \amp  1 \\ 1 \amp  0 \amp  1 \amp  0 \amp  1 \end{array} \right)
          </me>.
        </p>
        <p>
          Compute the syndrome caused by each of the following transmission errors.
          <ol>
            <li>
              <p>
                An error in the first bit.
              </p>
            </li>
            <li>
              <p>
                An error in the third bit.
              </p>
            </li>
            <li>
              <p>
                An error in the last bit.
              </p>
            </li>
            <li>
              <p>
                Errors in the third and fourth bits.
              </p>
            </li>
          </ol>
        </p>
      </statement>
    </exercise>
    <exercise>
      <statement>
        <p>
          Let <m>C</m> be the code obtained from the null space of the matrix
          <me>
            H = \left( \begin{array}{ccccc} 0 \amp  1 \amp  1 \amp  0 \amp  0 \\ 1 \amp  1 \amp  0 \amp  1 \amp  0 \\ 1 \amp  0 \amp  0 \amp  0 \amp  1 \end{array} \right)
          </me>.
        </p>
        <p>
          Decode the message
          <me>
            \begin{array}{cccc} 11101 \amp  11011 \amp  10101 \amp  01101 \end{array}
          </me>
          if possible.
        </p>
      </statement>
    </exercise>
    <exercise>
      <statement>
        <p>
          List all possible syndromes for the codes associated with each the parity matrices in <xref ref="exercise_ErrorAndCorrectionCode_StandardGenerator">Exercise</xref>.
        </p>
      </statement>
    </exercise>
  </subsection>
  <subsection xml:id="subsec_ErrorAndCorrectionCode_EfficientDecoding_CosetDecode">
    <title>Coset Decoding</title>
    <p>
      We can use group theory to obtain another way of decoding messages that makes use of <em>cosets</em>.
      (If you've forgotten what cosets are,
      you may look back at <xref ref="Cosets">Chapter</xref> to refresh your memory.)
    </p>
    <p>
      Since the linear code <m>C</m> is a subgroup of <m>\mathbb{Z}_2^n</m>,
      it follows that <m>\mathbb{Z}_2^n</m> may be partitioned into cosets of <m>C</m>.
      In particular, if <m>C</m> is an <m>(n,m)</m>-linear code,
      then a coset of <m>C</m> in
      <m>\mathbb{Z}_2^n</m> is written in the form <m>{\bold x} + C</m>,
      where <m>{\bold x} \in \mathbb{Z}_2^n</m>.
      By Lagrange's Theorem,
      there are <m>2^{n-m}</m> distinct cosets of <m>C</m> in <m>\mathbb{Z}_2^n</m>.
      The following example shows how this works in a particular case:
    </p>
    <example xml:id="example_ErrorAndCorrectionCode_SyndromeExample">
      <statement>
        <p>
          Let <m>C</m> be the <m>(5,3)</m>-linear code given by the parity-check matrix
          <me>
            H = \left( \begin{array}{cccccc} 0 \amp  1 \amp  1 \amp  0 \amp  0 \\ 1 \amp  0 \amp  0 \amp  1 \amp  0 \\ 1 \amp  1 \amp  0 \amp  0 \amp  1 \end{array} \right)
          </me>.
        </p>
        <p>
          The code consists of the codewords
          <me>
            \begin{array}{cccc} (00000)\amp  (01101)\amp  (10011)\amp  (11110), \end{array}
          </me>
        </p>
        <p>
          There are <m>2^{5-2} = 2^3</m> cosets of <m>C</m> in <m>\mathbb{Z}_2^5</m>,
          each with order <m>2^2 =4</m>.
          These cosets are listed in <xref ref="table_ErrorAndCorrectionCode_cosets">Table</xref>.
        </p>
      </statement>
    </example>
    <table xml:id="table_ErrorAndCorrectionCode_cosets">
      <title>Cosets of <m>C</m></title>
      <tabular>
        <row bottom="minor">
          <cell></cell>
          <cell></cell>
        </row>
        <row>
          <cell></cell>
          <cell>Cosets</cell>
        </row>
        <row bottom="minor">
          <cell></cell>
          <cell></cell>
        </row>
        <row>
          <cell><m>C</m></cell>
          <cell>(00000)  (01101)  (10011)  (11110)</cell>
        </row>
        <row>
          <cell>(10000) + <m>C</m></cell>
          <cell>(10000)  (11101)  (00011)  (01110)</cell>
        </row>
        <row>
          <cell>(01000) + <m>C</m></cell>
          <cell>(01000)  (00101)  (11011)  (10110)</cell>
        </row>
        <row>
          <cell>(00100) + <m>C</m></cell>
          <cell>(00100)  (01001)  (10111)  (11010)</cell>
        </row>
        <row>
          <cell>(00010) + <m>C</m></cell>
          <cell>(00010)  (01111)  (10001)  (11100)</cell>
        </row>
        <row>
          <cell>(00001) + <m>C</m></cell>
          <cell>(00001)  (01100)  (10010)  (11111)</cell>
        </row>
        <row>
          <cell>(10100) + <m>C</m></cell>
          <cell>(00111)  (01010)  (10100)  (11001)</cell>
        </row>
        <row>
          <cell>(00110) + <m>C</m></cell>
          <cell>(00110)  (01011)  (10101)  (11000)</cell>
        </row>
        <row bottom="minor">
          <cell></cell>
          <cell></cell>
        </row>
      </tabular>
    </table>
    <p>
      Let's see how knowing the cosets helps us to decode a message.
      Suppose that <m>{\bold x}</m> was the original codeword sent and that
      <m>{\bold r}</m> is the \mbox{<m>n</m>-tuple received} . If
      <m>{\bold e}</m> is the transmission error,
      then <m>{\bold r} = {\bold e} + {\bold x}</m> or,
      equivalently, <m>{\bold x} = {\bold e} + {\bold r}</m>.
      However, this is exactly the statement that
      <m>{\bold r}</m> is an element in the coset <m>{\bold e} + C</m>.
      In maximum-likelihood decoding we expect the error
      <m>{\bold e}</m> to be as small as possible;
      that is, <m>{\bold e}</m> will have the least weight.
      An <m>n</m>-tuple of least weight in a coset is called a
      <term>coset leader</term>.
          <idx><h>Coset</h><h>leader</h></idx>
      Once we have determined a coset leader for each coset,
      the decoding process becomes a task of calculating
      <m>{\bold r} + {\bold e}</m> to obtain <m>{\bold x}</m>.
    </p>
    <example>
      <statement>
        <p>
          In <xref ref="table_ErrorAndCorrectionCode_cosets">Table</xref>,
          notice that we have chosen a representative of the least possible weight for each coset.
          These representatives<idx><h>Representatives</h><h>as coset leaders</h></idx> are coset leaders.
          Now suppose that <m>{\bold r} = (01111)</m> is the received word.
          To decode <m>{\bold r}</m>,
          we find that it is in the coset <m>(00010) + C</m>;
          hence, the originally transmitted codeword must have been <m>(01101) = (01111) + (00010)</m>.
        </p>
      </statement>
    </example>
    <p>
      A potential problem with this method of decoding is that we might have to examine every coset for the received codeword.
      The following proposition shows us that we can avoid this because the syndrome that we calculate from the received codeword points to exactly one coset:
    </p>
    <proposition>
      <statement>
        <p>
          Let <m>C</m> be an <m>(n,k)</m>-linear code given by the matrix <m>H</m> and suppose that <m>{\bold x}</m> and
          <m>{\bold y}</m> are in <m>\mathbb{Z}_2^n</m>.
          Then <m>{\bold x}</m> and <m>{\bold y}</m> are in the same coset of <m>C</m> if and only if <m>H{\bold x} = H{\bold y}</m>.
          That is, two <m>n</m>-tuples are in the same coset if and only if their syndromes are the same.
        </p>
      </statement>
    </proposition>
    <proof>
      <p>
        Two <m>n</m>-tuples <m>{\bold x}</m> and
        <m>{\bold y}</m> are in the same coset of <m>C</m> exactly when <m>{\bold x} - {\bold y} \in C</m>;
        however, this is equivalent to
        <m>H({\bold x} - {\bold y}) = 0</m> or <m>H {\bold x} = H {\bold y}</m>.
      </p>
    </proof>
    <p>
      This proposition gives us a three-step process for finding decoding:
      <ol type="a">
        <li>
          <p>
            Compute the syndrome for the received codeword;
          </p>
        </li>
        <li>
          <p>
            Find the coset leader of the coset associated with this syndrome;
          </p>
        </li>
        <li>
          <p>
            Subtract the coset leader from the received codeword to find the most likely transmitted codeword.
          </p>
        </li>
      </ol>
    </p>
    <p>
      To facilitate step (b) of this process,
      we may make a lookup table that displays the coset leader associated with each syndrome.
      Such a table is called a <term>decoding table</term>.
          <idx><h>Decoding table</h></idx>
    </p>
    <example>
      <statement>
        <p>
          <xref ref="table_ErrorAndCorrectionCode_DecodingTable">Table</xref>
          is a decoding table for the code <m>C</m> given in <xref ref="example_ErrorAndCorrectionCode_SyndromeExample">Example</xref>.
          If <m>{\bold x} = (01111)</m> is received,
          then its syndrome can be computed to be
          <me>
            H {\bold x} = \left( \begin{array}{c} 0 \\ 1 \\ 1 \end{array} \right)
          </me>.
        </p>
        <p>
          Examining the decoding table,
          we determine that the coset leader is <m>(00010)</m>.
          It is now easy to decode the received codeword.
        </p>
      </statement>
    </example>
    <p>
      Given an <m>(n,k)</m>-block code,
      the question arises of whether or not coset decoding is a manageable scheme.
      A decoding table requires a list of cosets and syndromes,
      one for each of the <m>2^{n-k}</m> cosets of <m>C</m>.
      Suppose that we have a <m>(32, 24)</m>-block code.
      We have a huge number of codewords, <m>2^{24}</m>,
      yet there are only <m>2^{32-24} = 2^{8} = 256</m> cosets.
    </p>
    <table xml:id="table_ErrorAndCorrectionCode_DecodingTable">
      <title>Syndromes for each coset</title>
      <tabular>
        <row bottom="minor">
          <cell></cell>
          <cell></cell>
        </row>
        <row>
          <cell>Syndrome</cell>
          <cell>Coset Leader</cell>
        </row>
        <row bottom="minor">
          <cell></cell>
          <cell></cell>
        </row>
        <row>
          <cell>(000)</cell>
          <cell>(00000)</cell>
        </row>
        <row>
          <cell>(001)</cell>
          <cell>(00001)</cell>
        </row>
        <row>
          <cell>(010)</cell>
          <cell>(00010)</cell>
        </row>
        <row>
          <cell>(011)</cell>
          <cell>(10000)</cell>
        </row>
        <row>
          <cell>(100)</cell>
          <cell>(00100)</cell>
        </row>
        <row>
          <cell>(101)</cell>
          <cell>(01000)</cell>
        </row>
        <row>
          <cell>(110)</cell>
          <cell>(00110)</cell>
        </row>
        <row>
          <cell>(111)</cell>
          <cell>(10100)</cell>
        </row>
        <row bottom="minor">
          <cell></cell>
          <cell></cell>
        </row>
      </tabular>
    </table>
    <exercise>
      <statement>
        <p>
          Let <m>C</m> be the group code in
          <m>\mathbb{Z}_2^3</m> defined by the codewords <m>(000)</m> and <m>(111)</m>.
          Compute the cosets of <m>H</m> in <m>\mathbb{Z}_2^3</m>.
          Why was there no need to specify right or left cosets?
          Give the single transmission error, if any,
          to which each coset corresponds.
        </p>
      </statement>
    </exercise>
    <exercise>
      <statement>
        <p>
          For each of the following matrices,
          find the cosets of the corresponding code <m>C</m>.
          Give a decoding table for each code if possible.
        </p>
        <sidebyside>
          <ul>
            <li>
              <title>\textbf{(a)}</title>
              <p>
                <me>
                  \left( \begin{array}{ccccc} 0 \amp  1 \amp  0 \amp  0 \amp  0 \\ 1 \amp  0 \amp  1 \amp  0 \amp  1 \\ 1 \amp  0 \amp  0 \amp  1 \amp  0 \end{array} \right)
                </me>
              </p>
            </li>
          </ul>
          <ul>
            <li>
              <title>\textbf{(b)}</title>
              <p>
                <me>
                  \left( \begin{array}{ccccc} 0 \amp  0 \amp  1 \amp  0 \amp  0  \\ 1 \amp  1 \amp  0 \amp  1 \amp  0 \\ 0 \amp  1 \amp  0 \amp  1 \amp  0 \\ 1 \amp  1 \amp  0 \amp  0 \amp  1 \end{array} \right)
                </me>
              </p>
            </li>
          </ul>
        </sidebyside>
        <sidebyside>
          <ul>
            <li>
              <title>\textbf{(c)}</title>
              <p>
                <me>
                  \left( \begin{array}{ccccc} 1 \amp  0 \amp  0 \amp  1 \amp  1 \\ 0 \amp  1 \amp  0 \amp  1 \amp  1 \end{array} \right)
                </me>
              </p>
            </li>
          </ul>
          <ul>
            <li>
              <title>\textbf{(d)}</title>
              <p>
                <me>
                  \left( \begin{array}{ccccccc} 1 \amp  0 \amp  0 \amp  1 \amp  1 \amp  1 \amp  1 \\ 1 \amp  1 \amp  1 \amp  0 \amp  0 \amp  1 \amp  1 \\ 1 \amp  0 \amp  1 \amp  0 \amp  1 \amp  0 \amp  1 \\ 1 \amp  1 \amp  1 \amp  0 \amp  0 \amp  1 \amp  0 \end{array} \right)
                </me>
              </p>
            </li>
          </ul>
        </sidebyside>
      </statement>
    </exercise>
  </subsection>
</section>