<section xml:id="sec_Cryptography_PrivateKey">
  <title>Private key cryptography</title>
  <subsection xml:id="subsec_Cryptography_PrivateKey_ShiftCode">
    <title>Shift codes</title>
    <example xml:id="example_Cryptography_ex1">
      <statement>
        <p>
          One of the first and most famous private key cryptosystems was the shift code used by Julius Caesar.
              <idx><h>Caesar, Julius</h></idx>
          We first represent the alphabet numerically by letting <m>\mbox{A}   = 0, \mbox{B}   = 1, \ldots, \mbox{Y}  = 24, \mbox{Z}  = 25</m>.
          This means for example that the word BAY would be represented numerically as:
          <me>
            1,0,24
          </me>.
        </p>
        <p>
          An example of a shift encoding function is
          <me>
            f(n) =\bmod( n + 3,  26)
          </me>.
          which can also be written as
          <me>
            f(n) =n \oplus 3
          </me>,
          with the understanding that <m>n</m> refers to the numerical value assigned to each letter,
          and <m>\oplus</m> refers to addition in <m>\mathbb{Z}_{26}</m>.
          This encoding function takes
          <me>
            0 \rightarrow 3, 1 \rightarrow 4, \ldots, 24 \rightarrow 1,25 \rightarrow 2
          </me>,
          so that our numerical representation of BAY is changed to:
          <m>4,3,1</m>, which is the numerical representation of EDB.
        </p>
        <p>
          The decoding function is the inverse of the function <m>f</m>,
          which we can find in the usual way by solving the equation <m>m = n \oplus 3</m> for <m>n</m>.
          The result is <m>n = m \ominus 3</m>, so that
          <me>
            f^{-1}(m) = m \ominus 3 \qquad \textrm{ or } \qquad f^{-1}(m) = m \oplus 23
          </me>.
        </p>
        <p>
          Suppose we receive the encoded message DOJHEUD. To decode this message,
          we first represent it numerically:
          <me>
            3, 14, 9, 7, 4, 20, 3
          </me>.
        </p>
        <p>
          Next we apply the decryption function to get
          <me>
            0, 11, 6, 4, 1, 17, 0
          </me>,
          which is the numerical representation of ALGEBRA. Notice here that there is nothing special about either of the numbers 3 or 26.
          We could have used a larger alphabet or a different shift.
        </p>
      </statement>
    </example>
    <exercise xml:id="exercise_Cryptography_encode1">
      <statement>
        <ol type="a">
          <li>
            <p>
              Encode IXLOVEXMATH using the cryptosystem in <xref ref="example_Cryptography_ex1">Example</xref>.
            </p>
          </li>
          <li>
            <p>
              Encode the same message using the encoding function <m>f(n) =n \oplus 10</m>.
            </p>
          </li>
        </ol>
      </statement>
    </exercise>
    <exercise xml:id="exercise_Cryptography_decode1">
      <statement>
        <ol type="a">
          <li>
            <p>
              Decode ZLOOA WKLVA EHARQ WKHA ILQDO, which was encoded using the cryptosystem in <xref ref="example_Cryptography_ex1">Example</xref>.
            </p>
          </li>
          <li>
            <p>
              Decode: OFOBIDRSXQIYENYPVYGCPBYWDROROKBD, which was encoded using a shift code with a shift of 10.
            </p>
          </li>
        </ol>
      </statement>
    </exercise>
    <exercise>
      <statement>
        <ol type="a">
          <li>
            <p>
              The following is a ciphertext that was encoded using a shift code with a shift of 9.
              FWHKYVOGVFGCVQWFIHOKYVQGVFGCVHSPOKYVQGVFGCV Find the plaintext.
            </p>
          </li>
          <li>
            <p>
              A plaintext is encoded using a shift code with a shift of 14.
              The resulting ciphertext is shift-encoded again, using a shift of 14.
              The result is: VJGOQTGAQWMPQYVJGNGUUUWTGAQWCTGXQNVCKTG Find the plaintext.
            </p>
          </li>
        </ol>
      </statement>
    </exercise>
    <p>
      <term>Cryptanalysis</term>
          <idx><h>Cryptanalysis</h></idx>
      is concerned with deciphering a received or intercepted message.
      Methods from probability and statistics are great aids in deciphering an intercepted message;
      for example,
      the frequency analysis of the characters appearing in the intercepted message often makes its decryption possible.
    </p>
    <example xml:id="example_Cryptography_2">
      <statement>
        <p>
          Suppose we receive a message that we know was encrypted by using a shift transformation on single letters of the 26-letter alphabet.
          To find out exactly what the shift transformation was,
          we must compute <m>b</m> in the equation <m>f(n) = n + b \bmod 26</m>.
          We can do this using <term>frequency analysis</term>.
              <idx><h>Frequency analysis</h></idx>
          The letter <m>\mbox{E}  = 04</m> is the most commonly occurring letter in the English language.
          Suppose that <m>\mbox{S}  = 18</m> is the most commonly occurring letter in the ciphertext.
          Then we have good reason to suspect that <m>18 = 4 \oplus b</m>,
          or <m>b= 14</m>.
          Therefore, the most likely encoding function is
          <me>
            f(n) = n \oplus 14
          </me>.
        </p>
        <p>
          The corresponding decoding function is
          <me>
            f^{-1}(m) = m \oplus 12
          </me>.
        </p>
        <p>
          It is now easy to determine whether or not our guess is correct.
        </p>
      </statement>
    </example>
    <exercise xml:id="exercise_Cryptography_plaintext1">
      <statement>
        <p>
          The following ciphertext was encoded using a shift code.
          Both the letters E and I are encoded as vowels.
        </p>
        <p>
          IWPDAIWPEYOEOPDAMQAAJKBPDAOYEAJYAOYWNHBCWQOO
        </p>
        <p>
          Find the plaintext.
        </p>
      </statement>
    </exercise>
    <exercise xml:id="exercise_Cryptography_plaintext2">
      <statement>
        <p>
          In the following shift-coded ciphertext,
          one of the double-letter patterns represents <sq>ss</sq>.
        </p>
        <p>
          SGDDRRDMBDNELZSGDLZSHBRHRHMHSREQDDCNLFDNQFBZMSNQ
        </p>
        <p>
          Find the plaintext.
        </p>
      </statement>
    </exercise>
    <exercise>
      <statement>
        <ol type="a">
          <li>
            <p>
              For the English alphabet, how many different shift codes are there?
            </p>
          </li>
          <li>
            <p>
              Thai script has 44 letters.
              How many different shift codes are there for the Thai language?
            </p>
          </li>
        </ol>
      </statement>
    </exercise>
  </subsection>
  <subsection xml:id="subsec_Cryptography_PrivateKey_AffineCode">
    <title>Affine codes</title>
    <p>
      Let us investigate a slightly more sophisticated cryptosystem.
      Suppose that the encoding function is given by
      <me>
        f(n) = \bmod(an + b,  26)
      </me>,
      which can also be written as
      <me>
        f(n) = (a \odot n) \oplus b
      </me>.
    </p>
    <p>
      We first need to find out when a decoding function <m>f^{-1}</m> exists.
      Such a decoding function exists when we can solve the equation
      <me>
        m \equiv an + b \pmod{26}\qquad \textrm{or} \qquad a \odot n = m \ominus  b
      </me>
      for <m>n</m> in <m>\mathbb{Z}_{26}</m>.
      By <xref ref="proposition_ModularArithmetic_mod_eq_solution">Proposition</xref>
      in <xref ref="ModularArithmetic">Chapter</xref>,
      this is possible exactly when <m>a</m> has an inverse in <m>\mathbb{Z}_{26}</m>,
      which means that <m>\gcd( a, 26) =1</m>.
      Such a cryptosystem is called an
      <term>affine cryptosystem</term>.
          <idx><h>Cryptosystem</h><h>affine</h></idx>
    </p>
    <exercise>
      <statement>
        <ol type="a">
          <li>
            <p>
              Which of the numbers 0, 1, 2, <m>\dots</m>, 10 have inverses mod 26?
            </p>
          </li>
          <li>
            <p>
              For the numbers in (a) which have inverses mod 26, compute the inverses.
            </p>
          </li>
        </ol>
      </statement>
    </exercise>
    <exercise xml:id="exercise_Cryptography_affine1">
      <statement>
        <p>
          Find the decoding function for the following affine encoding functions
          (used on the English alphabet).
          <ol type="a">
            <li>
              <p>
                <m>f(n)=(3 \odot n) \oplus 14</m>
              </p>
            </li>
            <li>
              <p>
                <m>f(n)=(5 \odot n) \oplus 15</m>
              </p>
            </li>
            <li>
              <p>
                <m>f(n)=(7 \odot n) \oplus 23</m>
              </p>
            </li>
          </ol>
        </p>
      </statement>
    </exercise>
    <exercise>
      <statement>
        <p>
          Show that the general formula for the decoding function for <m>f(n) = (a \odot n) \oplus b</m> is
          <me>
            f^{-1}(m) = (a^{-1} \odot m)  \ominus (a^{-1}\odot b)
          </me>.
        </p>
        <p>
          (That is, show that <m>f \compose f^{-1}(m)=m</m>,
          and <m>f^{-1}\compose f(n) = n</m>.
          Note that <m>n</m> and <m>m</m> are <em>variables</em>,
          while <m>a</m> and <m>b</m> are <em>constants</em>
          which characterize the encoding function.)
        </p>
      </statement>
    </exercise>
    <example>
      <statement>
        <p>
          Let's consider the affine cryptosystem encoding function <m>f(n) = (a \odot n) \oplus  b</m>,
          where <m>\odot</m> and <m>\oplus</m> are multiplication and addition mod 26 respectively.
          For this cryptosystem to work we must choose an <m>a \in {\Bbb Z}_{26}</m> that is invertible.
          This is only possible if <m>\gcd(a, 26) = 1</m>.
          Recognizing this fact,
          we will let <m>a = 5</m> since <m>\gcd(5, 26) = 1</m>.
          The reader may check that <m>a^{-1} = 21</m>.
          Therefore, we can take our encryption function to be <m>f(n) = (5 \odot n) \oplus 3</m>.
          Thus, ALGEBRA is encoded as <m>3, 6, 7, 23, 8, 10, 3</m>,
          or DGHXIKD. The decryption function will be
          <me>
            f^{-1}(n) = (21 \odot  n) \ominus (21\odot 3)  =(21 \odot  n) \oplus 15
          </me>.
        </p>
      </statement>
    </example>
    <exercise xml:id="exercise_Cryptography_affine2">
      <statement>
        <p>
          For each of the following functions, (i) determine whether the function is a valid encoding function; (ii) if the function is valid,
          find the decoding function.
          (Assume the function is working on an alphabet with 26 letters.)
          <ol type="a">
            <li>
              <p>
                <m>f(n) = (4 \odot n) \oplus 7</m>
              </p>
            </li>
            <li>
              <p>
                <m>f(n) = (5 \odot n) \oplus 13</m>
              </p>
            </li>
            <li>
              <p>
                <m>f(n) = (11 \odot n) \oplus 14</m>
              </p>
            </li>
            <li>
              <p>
                <m>f(n) = (13 \odot n) \oplus 22</m>
              </p>
            </li>
          </ol>
        </p>
      </statement>
    </exercise>
    <exercise xml:id="exercise_Cryptography_english">
      <statement>
        <ol type="a">
          <li>
            <p>
              The general form for an affine cryptosystem encoding function is <m>f(n) = (a \odot n) \oplus b</m>.
              How many different possible values of <m>a</m> are there,
              for an affine cryptosystem that works on the English alphabet of 26 letters?
            </p>
          </li>
          <li>
            <p>
              For the same situation as (a),
              how many different possible values are there for <m>b</m>?
            </p>
          </li>
          <li>
            <p>
              What is the total number of affine cryptosystems that work on an alphabet of 26 letters?
            </p>
          </li>
        </ol>
      </statement>
    </exercise>
    <exercise>
      <statement>
        <p>
          The Spanish alphabet has 29 letters.
          Give answers to parts (a), (b),
          and (c) of <xref ref="exercise_Cryptography_english">Exercise</xref>,
          but with the Spanish alphabet instead of the English alphabet.
        </p>
      </statement>
    </exercise>
    <exercise>
      <statement>
        <p>
          The Hebrew alphabet has 22 letters.
          Give answers to parts (a), (b),
          and (c) of <xref ref="exercise_Cryptography_english">Exercise</xref>,
          but with the Hebrew alphabet instead of the English alphabet.
        </p>
      </statement>
    </exercise>
    <exercise>
      <statement>
        <p>
          Suppose that the encoding function for an affine cryptosystem is <m>f(n) = (a \odot n) \oplus b</m>,
          and the decoding function is <m>f^{-1}(m) = (a' \odot m) \oplus b'</m>.
          Suppose that a different cryptosystem uses the encoding function <m>g(n) = (a' \odot n) \oplus b'</m>.
          What is the decoding function for this second cryptosystem?
        </p>
      </statement>
    </exercise>
    <exercise>
      <statement>
        <ol type="a">
          <li>
            <p>
              The following message was encoded using an affine cryptosystem that encodes A as M and B as B. CKMYCZMLCOZCWKOHUCKDOHLMZLLNMZGZOEVUFYU Find the plaintext.
            </p>
          </li>
          <li>
            <p>
              The following message was encoded using an affine cryptosystem that encodes A as G and C as C. MQTNOELNWNETEHCEWHISCFKYHHFYKGCCEIPXQWFISCF Find the plaintext.
            </p>
          </li>
          <li>
            <p>
              The following message was encoded using an affine cryptosystem that encodes R as S and S as D. OMFMFNSOMNDSFNDLADOMNOSFNDLAJNAALOZAUFSDONAU Find the plaintext.
            </p>
          </li>
          <li>
            <p>
              The following message was encoded using an affine cryptosystem that encodes M as N and O as D. NVEMBNVEHLJHJEMBNZJHLDWOBVJDI Find the plaintext.
            </p>
          </li>
        </ol>
      </statement>
    </exercise>
  </subsection>
  <subsection xml:id="subsec_Cryptography_PrivateKey_MonoalphabeticCode">
    <title>Monoalphabetic codes</title>
    <p>
      In both shift codes and affine codes,
      one character in the encoded message represents exactly one character in the original message.
      Cryptosystems that employ such a one-to-one substitution are called
      <term>monoalphabetic cryptosystems</term>.
          <idx><h>Cryptosystem</h><h>monoalphabetic</h></idx>
      The
      <q>cryptoquips</q>
          <idx><h>Cryptoquip</h></idx>
      that appear regularly in many newspapers make use of this type of cryptosystem
      (see <xref ref="fig_cryptoquip">Figure</xref>).
    </p>
    <figure xml:id="fig_cryptoquip">
      <caption>Example of cryptoquip (source:
      <q>Cecil Whig</q>, \url{http://www.cecildaily.com/diversions/cryptoquip/ }).</caption>
      <image width="56%" source="images/cryptoquip.png"/>
    </figure>
    <exercise>
      <statement>
        <p>
          What is the total number of monoalphabetic cryptosystems?
        </p>
      </statement>
    </exercise>
    <p>
      Although there are many different possible monoalphabetic cryptosystems,
      they are relatively easy to break using frequency analysis.
      (You may even find web sites that can automatically decode cryptoquips.)
    </p>
  </subsection>
  <subsection xml:id="subsec_Cryptography_PrivateKey_PolyCodes">
    <title>Polyalphabetic codes</title>
    <p>
      A cryptosystem would be more secure if a ciphertext letter could represent more than one plaintext letter.
      To give an example of this type of cryptosystem,
      called a <term>polyalphabetic cryptosystem</term>,<idx><h>Cryptosystem</h><h>polyalphabetic</h></idx> we will generalize affine codes by using matrices.
      The idea works roughly the same as before;
      however, instead of encrypting one letter at a time we will encrypt pairs of letters
      (as before, letters are represented by elements of <m>{\Bbb Z}_{26}</m>).
      We can store a pair of letters <m>n_1</m> and <m>n_2</m> in a vector
      <me>
        {\bold n} = \left( \begin{array}{c} n_1 \\ n_2 \end{array} \right)
      </me>.
    </p>
    <p>
      Let <m>A</m> be a <m>2 \times 2</m> invertible matrix with entries in <m>{\Bbb Z}_{26}</m>.
      We can define an encoding function by
      <me>
        f({\bold n}) = (A \odot {\bold n}) \oplus {\bold b}
      </me>,
      where <m>{\bold b}</m> is a fixed column vector and matrix operations are performed in <m>{\Bbb Z}_{26}</m>.
      The formula for the decoding function
      (which is the inverse of the encoding function)
      is very similar to the decoding function formula that we found for affine encoding:
      <me>
        f^{-1}({\bold m}) = (A^{-1} \odot {\bold m}) \ominus (A^{-1} \odot {\bold b})
      </me>,
      where <m>A^{-1}</m> is the <em>matrix inverse</em> of <m>A</m>:
      that is, <m>A^{-1}A = A A^{-1} = I</m>,
      where <m>I</m> is the <m>2 \times 2</m> identity matrix. *Note* that in these formulas,
      we are using <em>modular</em> matrix multiplication instead of
      <em>regular</em> matrix multiplication:
      that is, the regular <m>\cdot</m> and <m>+</m> operations are replaced by <m>\odot</m> and <m>\oplus</m>:
    </p>
    <exercise xml:id="exercise_Cryptography_mod_mult">
      <statement>
        <p>
          Perform the following operations using modular matrix multiplication (mod 26):
          <ol type="a">
            <li>
              <p>
                <m>\left( \begin{array}{cc} 5 \amp 6 \\ 7 \amp 8 \end{array} \right) \left( \begin{array}{c} 4 \\ 4 \end{array} \right)</m>
              </p>
            </li>
            <li>
              <p>
                <m>\left( \begin{array}{cc} 1 \amp 13 \\ 16 \amp 2 \end{array} \right) \left( \begin{array}{c} 3 \\ 1 \end{array} \right)</m>
              </p>
            </li>
            <li>
              <p>
                <m>\left( \begin{array}{cc} 12 \amp 4 \\ 13 \amp 5 \end{array} \right) \left( \begin{array}{cc} 2 \amp 1 \\ 20 \amp 20 \end{array} \right)</m>
              </p>
            </li>
            <li>
              <p>
                <m>\left( \begin{array}{cc} 13 \amp 2 \\ 2 \amp 13 \end{array} \right) \left( \begin{array}{cc} 2 \amp 13 \\ 13 \amp 2 \end{array} \right)</m>
              </p>
            </li>
          </ol>
        </p>
      </statement>
    </exercise>
    <example xml:id="example_Cryptography_4">
      <statement>
        <p>
          Suppose that we wish to encode the word HELP. The corresponding digit string is <m>7, 4, 11, 15</m>.
          If
          <me>
            A = \left( \begin{array}{cc} 3 \amp  5 \\ 1 \amp  2 \end{array} \right)
          </me>,
          then
          <me>
            A^{-1} = \left( \begin{array}{cc} 2 \amp  21 \\ 25 \amp  3 \end{array} \right)
          </me>.
        </p>
        <p>
          (You may check that <m>\bmod(AA^{-1},26) = \bmod(A^{-1}A,26) = I</m>.) If <m>{\bold b} = \left( \begin{array}{c} 2 \\ 2 \end{array} \right)</m>,
          then our message is encrypted as RRGR, where HE encrypts as RR and LP encrypts as GR.
        </p>
      </statement>
    </example>
    <p>
      In order to make use of polyalphabetic cryptosystems,
      we need to be able to find the inverse of a
      <m>2 \times 2</m> matrix with entries in <m>{\Bbb Z}_{26}</m>.
      As we *noted* above,
      this inverse is under matrix multiplication mod 26,
      rather than regular matrix multiplication.
      Still, we can try to make use of the matrix inverse formula from regular matrix multiplication:
      <me>
        \left( \begin{array}{cc} a \amp  b \\ c \amp  d \end{array}  \right)^{-1} = \frac{1}{ad-bc} \left( \begin{array}{cc} d \amp  -b \\ -c \amp  a \end{array}  \right)  =  \left( \begin{array}{cc} kd \amp  -kb \\ -kc \amp  ka \end{array}  \right)
      </me>,
      where
      <me>
        k = \frac{1}{ad - bc}
      </me>.
    </p>
    <p>
      This suggests that the following formula may be valid mod 26:
      <me>
        \left( \begin{array}{cc} a \amp  b \\ c \amp  d \end{array}  \right)^{-1} = \left( \begin{array}{cc} k \odot d \amp  -k \odot b \\ -k \odot c \amp  k \odot a \end{array}  \right)
      </me>,
      where
      <me>
        k = ((a \odot d) \ominus (b \odot c))^{-1}
      </me>,
      and <m>(\cdots)^{-1}</m> means inverse under multiplication in <m>{\Bbb Z}_{26}</m>.
      We will see in the following exercise that this works as long as
      <m>(a \odot d) \, \ominus \, (b \odot c)</m> has a multiplicative inverse in <m>{\Bbb Z}_{26}</m>.
    </p>
    <exercise>
      <statement>
        <p>
          Suppose that <m>(a \odot d) \, \ominus \, (b \odot c)</m> has an inverse in <m>{\Bbb Z}_{26}</m>:
          that is to say, suppose there is a
          <m>k \in  {\Bbb Z}_{26}</m> such that <m>k \odot ((a \odot d) \, \ominus \, (b \odot c)) = 1</m>.
          Show that the matrices:
          <me>
            A = \left( \begin{array}{cc} a \amp  b \\ c \amp  d \end{array}  \right)~~~\text{ and } ~~~ B= \left( \begin{array}{cc}  k \odot d \amp  - k \odot b \\ - k \odot c \amp   k \odot a \end{array}  \right)
          </me>
          are inverses of each other in <m>{\Bbb Z}_{26}</m>.
          That is, show that <m>AB = BA = I</m> under matrix multiplication mod 26.
        </p>
      </statement>
    </exercise>
    <p>
      The previous exercise leaves open the question of whether <m>\left( \begin{array}{cc} a \amp  b \\ c \amp  d \end{array}  \right)</m> has an inverse when
      <m>(a \odot d)  \ominus (b \odot c)</m> has no inverse in <m>{\Bbb Z}_{26}</m>.
      Once again, we can reach back to our previous matrix knowledge to resolve this issue.
      Recall that the quantity <m>ad - bc</m> is called the
      <term>determinant</term><idx><h>Matrix</h><h>determinant</h></idx> of the matrix <m>\left( \begin{array}{cc} a \amp  b \\ c \amp  d \end{array}  \right)</m>.
      There is also a famous formula for the determinant of the product of matrices:
      <me>
        \text{ det } (A) \text{ det } (B) = \text{ det } (AB)
      </me>.
    </p>
    <p>
      This same formula carries over to matrix multiplication mod 26, because
      (as we've seen)
      in any equation using only the operations of multiplication,
      addition, and subtraction,
      we can replace these operations with their modular versions and still have a true equation.
      We can use this to show that <m>(a \odot d) \ominus (b \odot c)</m> <em>must</em>
      have an inverse in <m>{\Bbb Z}_{26}</m> in order for <m>\left( \begin{array}{cc} a \amp b \\ c \amp d \end{array} \right)</m> to have an inverse:
    </p>
    <exercise xml:id="exercise_Cryptography_mat1">
      <statement>
        <p>
          Suppose that <m>A = \left( \begin{array}{cc} a \amp b \\ c \amp d \end{array} \right)</m> is a matrix with entries in <m>{\Bbb Z}_{26}</m>,
          such that <m>(a \odot d) \ominus (b \odot c)</m> has no inverse in <m>{\Bbb Z}_{26}</m>.
          Show that <m>A</m> has no inverse in <m>{\Bbb Z}_{26}</m>. (*Hint*)
        </p>
      </statement>
    </exercise>
    <exercise xml:id="exercise_Cryptography_minv">
      <statement>
        <p>
          Find matrix inverses in <m>{\Bbb Z}_{26}</m> for the following matrices.
          If no inverse exists, then prove there is no inverse.
          <ol type="a">
            <li>
              <p>
                <m>\left( \begin{array}{cc} 9 \amp 2 \\ 20 \amp 5 \end{array} \right)</m>
              </p>
            </li>
            <li>
              <p>
                <m>\left( \begin{array}{cc} 2 \amp 3 \\ 23 \amp 2 \end{array} \right)</m>
              </p>
            </li>
            <li>
              <p>
                <m>\left( \begin{array}{cc} 4 \amp 11 \\ 3 \amp 2 \end{array} \right)</m>
              </p>
            </li>
            <li>
              <p>
                <m>\left( \begin{array}{cc} 2 \amp 2 \\ 3 \amp 4 \end{array} \right)</m>
              </p>
            </li>
          </ol>
        </p>
      </statement>
    </exercise>
    <exercise>
      <statement>
        <p>
          For the same matrices as in <xref ref="exercise_Cryptography_minv">Exercise</xref>,
          find the matrix inverses in <m>{\Bbb Z}_{29}</m>.
        </p>
      </statement>
    </exercise>
    <exercise>
      <statement>
        <p>
          Given that
          <me>
            A = \left( \begin{array}{cc} 3 \amp  4 \\ 2 \amp  3 \end{array} \right),~~ \text{ and~ }  {\bold b} = \left( \begin{array}{c} 2 \\ 5 \end{array} \right)
          </me>.
          <ol type="a">
            <li>
              <p>
                Use the encryption function
                <m>f({\bold p}) = A {\bold p} + {\bold b}</m> to encode the message CRYPTOLOGY.
              </p>
            </li>
            <li>
              <p>
                What is the decoding function?
              </p>
            </li>
          </ol>
        </p>
      </statement>
    </exercise>
    <p>
      Frequency analysis can still be performed on a polyalphabetic cryptosystem,
      because we have a good understanding of how pairs of letters appear in the English language.
      The pair <em>th</em> appears quite often;
      the pair <em>qz</em> never appears.
      To avoid decryption by a third party,
      we must use a larger matrix than the one we used in <xref ref="example_Cryptography_4">Example</xref>.
    </p>
  </subsection>
  <subsection>
    <title>Spreadsheet exercises</title>
    <introduction>
      <p>
        Spreadsheets can be used to automate many of the calculations that we have looked at in the previous sections.
      </p>
    </introduction>
    <subsubsection xml:id="sec_Cryptography_PrivateKey_ShiftCodeAndDecodeSpreadsheet">
      <title>Shift encoding and decoding spreadsheet <nbsp/><nbsp/></title>
      <figure>
        <video youtubeplaylist="PL2uooHqQ6T7PW5na4EX8rQX2WvBBdM8Qo"/>
      </figure>
      <exercise xml:id="exercise_Cryptography_EngShift">
        <statement>
          <p>
            In this exercise,
            you will use a spreadsheet to create an automated shift encoder for English.
            Please refer to <xref ref="fig_AutoShiftEnc">Figure</xref> for guidance:
          </p>
          <figure xml:id="fig_AutoShiftEnc">
            <caption>Automatic shift encoder for English.</caption>
            <image width="56%" source="images/AutoShiftEnc.png"/>
          </figure>
          <ol type="i">
            <li>
              <p>
                Put the Shift value in cell C2.
              </p>
            </li>
            <li>
              <p>
                Put the alphabet
                (starting with A),
                numerical values for the letters
                (starting with 0),
                and the alphabet again in columns A, B, C starting on line 5.
              </p>
            </li>
            <li>
              <p>
                Type your plaintext in row 5, starting in column F.
              </p>
            </li>
            <li>
              <p>
                Row 6 beginning in column F contains the numerical values for the plaintext.
                The formula in cell F6 is:
                <q>=VLOOKUP(F5, $A$5:$B$30,2)</q>. The significance of this formula is as follows:
                <ul>
                  <li>
                    <p>
                      The function VLOOKUP means that the program will look up a given value in a given table;
                    </p>
                  </li>
                  <li>
                    <p>
                      The F5 is the first argument of VLOOKUP, which means that the value being looked up is in cell F5;
                    </p>
                  </li>
                  <li>
                    <p>
                      The $A$5:$B$30 is the second argument of VLOOKUP, which means that it represents the cells containing the table that the value will be looked up in.
                      The dollar signs are used to guarantee that the table will remain fixed when the formula is copied and pasted into another cell; The 2 which is the third lookup of VLOOKUP indicates that the value in the second column in the same row as the looked-up value is placed in the cell where the formula is located.
                    </p>
                  </li>
                </ul>
              </p>
            </li>
            <li>
              <p>
                Row 7 beginning in column F gives the encoded numerical values.
                The formula in cell F7 is
                <q>=MOD(F6+$C$2,26)</q>. The dollar signs on C2 guarantee that when the formula is copied,
                the shift still refers to the value in C2.
              </p>
            </li>
            <li>
              <p>
                Row 8 beginning in column F gives the ciphertext.
                The formula in cell F8 is:
                <q>=VLOOKUP(F7,$B$5:$C$30,2)</q>.
              </p>
            </li>
            <li>
              <p>
                Rows 9,10, and 11 are similar to rows 6,7,8 respectively.
                Try to do this yourself.
              </p>
            </li>
          </ol>
          <p>
            Once you have completed the formulas,
            select cells F6 through J11, and use the spreadsheet's
            <q>Fill Right</q>
            capability to carry the formulas to the other columns. (If your plaintext is longer,
            you can select more columns and fill right.
          </p>
        </statement>
      </exercise>
      <exercise>
        <statement>
          <p>
            The Spanish alphabet has 3 more letters than English:
            <sq>Ch</sq>
            (comes after C in the alphabet),
            <sq>Ll</sq>
            (comes after L in the alphabet),
            and <sq>Nn</sq>
            (comes after N).
            Modify the sheet you created in <xref ref="exercise_Cryptography_EngShift">Exercise</xref>
            to make a Spanish language shift encoder.
            Use your sheet to decode the following message:
          </p>
          <p>
            MS KIUPVX UIB NIKPS VX MB BPMUYAM MS UMQXA
          </p>
          <p>
            (Note that <sq>Ch</sq> counts as a single letter.)
          </p>
        </statement>
      </exercise>
    </subsubsection>
    <subsubsection xml:id="sec_Cryptography_PrivateKey_AffineCodeDecodeSpreadsheet">
      <title>Affine encoding and decoding spreadsheet
      <nbsp/><nbsp/></title>
      <figure>
        <video youtubeplaylist="PL2uooHqQ6T7PW5na4EX8rQX2WvBBdM8Qo"/>
      </figure>
      <exercise>
        <statement>
          <p>
            Create a spreadsheet that can perform any affine encoding on English plaintext.
            You may model your spreadsheet on the sheet in <xref ref="fig_affine">Figure</xref>.
            Use your spreadsheet to decode the following message:
          </p>
          <p>
            EMBNDOBFDZXIDPEMBSBJJJZOBFDZVOBUDSEVHOB
          </p>
          <p>
            which was encoded using an affine encoding function with <m>b=21</m>.
          </p>
          <figure xml:id="fig_affine">
            <caption>Automatic affine encoder for English.</caption>
            <image width="65%" source="images/Affine.png"/>
          </figure>
        </statement>
      </exercise>
      <exercise>
        <statement>
          <p>
            In order to decode an affine cryptosystem on English letters with encoding function <m>f(p) = (a\odot p) \oplus b</m>,
            it is necessary to find the inverse of <m>a</m> under multiplication mod 26.
            We have ways of finding inverses of individual numbers.
            But we can also use spreadsheet software to find all inverses in one fell swoop as described below.
          </p>
          <p>
            Open a sheet in your favorite spreadsheet software (Excel, LibreOffice,
            or OpenOffice).
            Put the numbers 0 through 25 in column A, starting at row 3, and also in row 2 starting in column B. To fill up the table,
            put the formula
            <q>=MOD($A3*B$2,26)</q>
            in cell B3, as shown in <xref ref="fig_mod26mult">Figure</xref>.
            This formula causes the software to take the product of the contents of cells A3 and B2, and put the result mod 26 into cell B3.
            The dollar signs are important: these indicate
            <q>fixed reference</q>. For example,
            the <sq>$A3</sq> means that when this formula is copied to other cells,
            the reference to column A remains unchanged while the column may change.
            On the other hand,
            the <sq>B$2</sq> means that when the formula is copied to other cells,
            the reference to column 2 remains unchanged.
          </p>
          <p>
            At this point,
            select the range of cells from B3 to AA28 (this will be a square region of <m>26 \times 26</m> cells.
            Use your spreadsheet's
            <q>Fill down</q>
            and
            <q>Fill right</q>
            feature to fill all the cells in this region.
            The location of all of the <sq>1</sq>'s in this table shows all of the inverses.
            For example,
            there is a '1' in the row labeled 9 and column labeled 3.
            This means that 9 and 3 are inverses of each other mod 26.
          </p>
          <p>
            Use this spreadsheet table to create a 2-column table:
            in the first column, put the numbers 0 through 26,
            and in the second column, put the inverses
            (if the number has no inverse,
            just put a <sq><m>-</m></sq>).
          </p>
          <figure xml:id="fig_mod26mult">
            <caption>Mod 26 multiplication table.</caption>
            <image width="42%" source="images/MultMod26.png"/>
          </figure>
        </statement>
      </exercise>
      <exercise>
        <statement>
          <p>
            Following the previous exercise,
            find all inverses of the numbers mod 29
            (this can be used in affine encoding of Spanish, which has 29 letters).
          </p>
        </statement>
      </exercise>
      <exercise>
        <statement>
          <p>
            Make a spreadsheet that can do polyalphabetic coding. you may base your sheet's design on <xref ref="fig_polycrypto">Figure</xref>.
            The figure shows the encoding of the word CRYPTOLOGY using <m>A = \left( \begin{array}{cc} 3 \amp 5 \\ 1 \amp 2 \end{array} \right)</m>,
            and <m>{\bold b} = \left( \begin{array}{c} 2 \\ 2 \end{array} \right)</m>.
          </p>
          <p>
            Use your spreadsheet to decode the following words that were encoded using
            <m>f({\bold p}) = A {\bold p} + {\bold b}</m> with the given <m>A</m> and <m>{\bold b}</m>.
            <ol type="a">
              <li>
                <p>
                  VVDGOFOKLY, <m>A= \left( \begin{array}{cc} 13 \amp 5 \\ 9 \amp 2 \end{array} \right)</m>,
                  and <m>{\bold b} = \left( \begin{array}{c} 7 \\ 13 \end{array} \right)</m>.
                </p>
              </li>
              <li>
                <p>
                  VWFGTWQKTA, <m>A= \left( \begin{array}{cc} 17 \amp 13 \\ 6 \amp 3 \end{array} \right)</m>,
                  and <m>{\bold b} = \left( \begin{array}{c} 14 \\ 18 \end{array} \right)</m>.
                </p>
              </li>
              <li>
                <p>
                  EXUFQPRRGA, <m>A= \left( \begin{array}{cc} 3 \amp 4 \\ 5 \amp 7 \end{array} \right)</m>,
                  and <m>{\bold b} = \left( \begin{array}{c} 4 \\ 8 \end{array} \right)</m>.
                </p>
              </li>
            </ol>
          </p>
          <figure xml:id="fig_polycrypto">
            <caption>(Semi-)automatic polyalphabetic encoder/decoder for English. Note that cell N3 is entered by hand, based on the value in N2.</caption>
            <image width="93%" source="images/polycrypto2.png"/>
          </figure>
        </statement>
      </exercise>
    </subsubsection>
  </subsection>
</section>