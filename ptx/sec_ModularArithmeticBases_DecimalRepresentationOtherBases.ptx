<section xml:id="sec_ModularArithmeticBases_DecimalRepresentationOtherBases">
  <title>Decimal representations in other bases</title>
  <p>
    We've mentioned above that we can express numbers in other bases besides base 10.
    First we should explain what it means to represent a number in base <m>b</m>,
    where <m>b>2</m> is a positive integer.
    Recall that the base 10 number
    <m>d_n d_{n-1} \ldots d_1 d_0</m> represents the integer:
    <me>
      d_n d_{n-1} \ldots d_1 d_0 = d_n \cdot 10^n + d_{n-1}\cdot 10^{n-1} + \ldots + d_1 \cdot 10 + d_0
    </me>.
  </p>
  <p>
    For a number expressed in base <m>b</m>,
    we simply replace the 10's with <m>b</m>'s:
    <me>
      (d_n d_{n-1} \ldots d_1 d_0)_b = d_n \cdot b^n + d_{n-1}\cdot b^{n-1} + \ldots + d_1 \cdot b + d_0
    </me>.
  </p>
  <p>
    For example, <m>(6342)_8</m> represents the number:
    <me>
      (6342)_8 = 6 \cdot 8^3 + 3 \cdot 8^2 + 4 \cdot 8^1 + 2 \cdot 8^0
    </me>.
  </p>
  <p>
    Note that if <m>(d_n d_{n-1} \ldots d_1 d_0)_b</m> is a base <m>b</m> representation,
    then all of the digits <m>d_0, \ldots d_n</m> must be between 0 and <m>b-1</m>.
  </p>
  <p>
    In order to be able to use other base representations effectively,
    we'll need to know how to convert numbers back and forth between other bases and base 10.
    Let's see how this is done.
  </p>
  <example xml:id="example_ModularArithmeticBases_137_base_6">
    <statement>
      <p>
        Find <m>137</m> in base <m>6</m>.
        I will solve this following the recursive method described in <xref ref="sec_ModularArithmeticBases_DecimalRepresentationOtherBases">Section</xref>,
        but using base 6 instead of base 10.
        <md>
          <mrow>a_{0}\amp =137;~d_{0}=\bmod(137,6)=5</mrow>
          <mrow>a_{1}\amp =\frac{137-5}{6}=22;~d_{1}=\bmod(22,6)=4</mrow>
          <mrow>a_{2}\amp =\frac{22-4}{6}=3;~d_{2}=\bmod(3,6)=3</mrow>
          <mrow>a_{3}\amp =\frac{3-3}{6}=0</mrow>
        </md>
      </p>
      <p>
        Since <m>a_{3}=0</m> we can stop.
        To write the solution take the moduli in reverse order.
        Therefore, <m>137</m> in base <m>6</m> is <m>345</m>.
      </p>
    </statement>
  </example>
  <example xml:id="example_ModularArithmeticBases_121_base_3">
    <statement>
      <p>
        Find <m>121</m> in base <m>3</m>.
        Once again using the recursive method
        <md>
          <mrow>a_{0}\amp =121; d_{0}=\bmod(121,3)=1</mrow>
          <mrow>a_{1}\amp =\frac{121-1}{3}=40; d_{1}=\bmod(40,3)=1</mrow>
          <mrow>a_{2}\amp =\frac{40-1}{3}=13; d_{2}=\bmod(13,3)=1</mrow>
          <mrow>a_{3}\amp =\frac{13-1}{3}=4; d_{3}=\bmod(4,3)=1</mrow>
          <mrow>a_{4}\amp =\frac{4-1}{3}=1; d_{4}\bmod(1,3)=1</mrow>
          <mrow>a_{5}\amp =\frac{1-1}{3}=0</mrow>
        </md>
      </p>
      <p>
        Since <m>a_{5}=0</m> we do not have to continue.
        To write the solution take the moduli in reverse order.
        Therefore, <m>121</m> in base <m>3</m> is <m>11111</m>.
      </p>
    </statement>
  </example>
  <example xml:id="example_ModularArithmeticBases_65432_in_base_3">
    <statement>
      <p>
        Find the 5th digit of <m>65432</m> in base <m>3</m>. (This is the coefficient of <m>3^4</m> in the base 3 representation).
        We may use Eq.
        <xref ref="eq_digit"></xref>,
        just replacing base 10 with base 3:
        <me>
          d_{4}=\frac{\bmod(65432,3^{5})-\bmod(65432,3^{4})}{3^{4}}
        </me>
      </p>
    </statement>
  </example>
  <p>
    You might be thinking that this is very similar to how we found the <m>k'th</m> digit of a decimal integer in <xref ref="decDigits">Section</xref> and you would be correct!
    The main difference is that the base in the modulus is not a base of 10 but the base of the number we are finding
    (in the above example base 3).
    Also, instead of finding only one of the digits of a number in base 10,
    we are finding <em>all</em> the digits of a number in another base
    (in the above example it is base 3).
    We know we are done finding the entire number when <m>a_{n}=0</m> and we write the final number in the reverse order of how we found the modulus'.
  </p>
  <exercise xml:id="exercise_ModularArithmeticBases_numbers_in_other_bases">
    <statement>
      <ol type="a">
        <li>
          <p>
            Find <m>1567</m> in base <m>5</m>.
          </p>
        </li>
        <li>
          <p>
            Find <m>344</m> in base <m>3</m>.
          </p>
        </li>
        <li>
          <p>
            Find <m>7281</m> in base <m>7</m>.
          </p>
        </li>
        <li>
          <p>
            Find <m>3491</m> base <m>4</m>.
          </p>
        </li>
        <li>
          <p>
            Find <m>65432</m> in base <m>3</m>.
          </p>
        </li>
      </ol>
    </statement>
  </exercise>
  <p>
    Being able to represent numbers in base 2 is important in computer science because this is how computers do arithmetic.
    In base 2 the digits are called <term>bits</term>.
    All information that is stored in the computer is stored in the form of bits.
    A block of 8 bits is called a <term>byte</term>:
    computer memory is measured in terms of kilobytes, megabytes,
    or gigabytes.
    Integers are commonly stored as either 2 or 4 bytes.
  </p>
  <example xml:id="example_ModularArithmeticBases_convert_to_base_2">
    <statement>
      <p>
        Find <m>31</m> in base <m>2</m>.
        <md>
          <mrow>a_{0}\amp =31;~d_{0}=\bmod(31,2)=1;\amp a_{1}=\frac{31-1}{2}=15;~b_{1}=\bmod(15,2)=1</mrow>
          <mrow>a_{2}\amp =\frac{15-1}{2}=15;~b_{2}=\bmod(14,2)=0;\amp a_{3}=\frac{14-0}{2}=15;~b_{3}=\bmod(7,2)=1</mrow>
          <mrow>a_{4}\amp =\frac{7-1}{2}=15;~b_{4}=\bmod(6,2)=0;\amp a_{5}=\frac{6-0}{2}=15;~b_{5}=\bmod(3,2)=1</mrow>
          <mrow>a_{6}\amp =\frac{3-1}{2}=15;~b_{6}=\bmod(1,2)=1;\amp a_{7}=\frac{1-1}{2}=0;~b_{7}=\bmod(0,2)=0</mrow>
        </md>
      </p>
      <p>
        Therefore <m>N=31</m> written in base <m>2</m> is <m>0110101</m>.
        If stored as a 2-byte integer,
        <m>N</m> would be represented as <m>0b0000000000110101</m>
        (the <sq>0b</sq> prefix indicates that the number is a binary number).
      </p>
    </statement>
  </example>
  <exercise xml:id="exercise_ModularArithmeticBases_numbers_in_base_2">
    <statement>
      <p>
        Express the following as 2-byte binary integers
        <ol type="a">
          <li>
            <p>
              <m>73</m>
            </p>
          </li>
          <li>
            <p>
              <m>235</m>
            </p>
          </li>
          <li>
            <p>
              <m>1940</m>
            </p>
          </li>
          <li>
            <p>
              <m>67037</m>
            </p>
          </li>
        </ol>
      </p>
    </statement>
  </exercise>
  <p>
    Base 16 is also often used:
    numbers in base 16 are called <term>hexadecimal</term> numbers.
    In hexadecimal
    (or <sq>hex</sq>)
    representation, the letters
    <m>A,B,C,D,E,F</m> are used to represent <m>10, 11, 12, 13,14, 15</m> respectively.
    In many computer languages
    (like Java, C++, and Python),
    a hexadecimal number is indicated by the prefix <sq>0x</sq>.
    So for example,
    the hex number <m>0xABCD</m> signifies <m>10\cdot 16^3 + 11 \cdot 16^2 + 12 \cdot 16^1 + 13</m>.
  </p>
  <exercise xml:id="exercise_ModularArithmeticBases_hex">
    <statement>
      <p>
        Find the hex representations of the following decimal numbers
        <ol type="a">
          <li>
            <p>
              <m>4095</m>
            </p>
          </li>
          <li>
            <p>
              <m>10000</m>.
            </p>
          </li>
          <li>
            <p>
              <m>123456</m>
            </p>
          </li>
        </ol>
      </p>
    </statement>
  </exercise>
  <p>
    Converting numbers from base 10 to another base is fun!
    But how about converting numbers from another base to base 10?
    Piece of cake:
  </p>
  <example xml:id="example_ModularArithmeticBases_121_base_3b">
    <statement>
      <p>
        Convert <m>121</m> in base <m>3</m> to a number in base 10.
      </p>
      <p>
        <m>(121)_{3}=1\cdot 3^{2}+2\cdot 3^{1}+1\cdot 3^{0}=1\cdot 9+2\cdot 3+1\cdot 1=(16)_{10}</m>
      </p>
    </statement>
  </example>
  <example xml:id="example_ModularArithmeticBases_4752_base_8">
    <statement>
      <p>
        Convert 4752 in base 8 to a number in base 10
      </p>
      <p>
        <m>(4752)_{8}=4\cdot 8^{3}+7\cdot 8^{2}+5\cdot 8^{1}+2\cdot 8^{0}=4\cdot 512+7\cdot 64+5\cdot 8+2\cdot 1=(2538)_{10}</m>
      </p>
    </statement>
  </example>
  <p>
    Do you recognize this from before?
    All that we're doing is using the defining equation for base <m>b</m> representation:
    <men>
      (n)_{b}=d_{m}\cdot (b)^{m}+d_{m-1}\cdot (b)^{m-1}+\cdots+d_{0}
    </men>
  </p>
  <exercise xml:id="exercise_ModularArithmeticBases_numbers_to_base_10">
    <statement>
      <p>
        Convert the given numbers with their bases to a number in base 10:
        <ol>
          <li>
            <p>
              456 base 7
            </p>
          </li>
          <li>
            <p>
              32102 base 4
            </p>
          </li>
          <li>
            <p>
              8714 base 9
            </p>
          </li>
        </ol>
      </p>
    </statement>
  </exercise>
  <p>
    Earlier we mentioned the importance of converting numbers in base 10 to base 2.
    It is just as important to convert numbers in base 2 to base 10.
  </p>
  <example xml:id="example_ModularArithmeticBases_1011_base_2">
    <statement>
      <p>
        Convert 1011 in base 2 to a number in base 10.
      </p>
      <p>
        <m>(1011)_{2}=1\cdot 2^{3}+0\cdot 2^{2}+1\cdot 2^{1}+1\cdot 2^{0}=1\cdot 8+0\cdot 4+1\cdot 2+1\cdot 1=(11)_{10}</m>
      </p>
    </statement>
  </example>
  <exercise xml:id="exercise_ModularArithmeticBases_base_2_to_base_10">
    <statement>
      <p>
        Convert the given numbers in base 2 to a number in base 10:
        <ol type="a">
          <li>
            <p>
              10101
            </p>
          </li>
          <li>
            <p>
              11011001
            </p>
          </li>
          <li>
            <p>
              100111011
            </p>
          </li>
        </ol>
      </p>
    </statement>
  </exercise>
  <exercise xml:id="exercise_ModularArithmeticBases_computerGraphics">
    <statement>
      <p>
        In computer graphics, colors are often represented using
        <term>RGB notation</term>.
        Colors have red, green, and blue components;
        and each component has an intensity level from 0 to 255,
        which can be stored as a single byte.
        Each byte is represented as two hex digits,
        so colors are represented as a six-digit hex number.
        For example, 0xFFFFFF represents intensities of 255 for red,
        green and blue,
        corresponding to the color white,
        while 0x000000 represents black. 0xFF0000, 0x00FF00, 0x0000FF represent pure red,
        pure green,
        and pure blue respectively.
      </p>
      <p>
        Find the red, green,
        and blue intensities for the following colors in hex representation:
        <ol type="a">
          <li>
            <p>
              0xAA45E2
            </p>
          </li>
          <li>
            <p>
              0x29A4F3
            </p>
          </li>
          <li>
            <p>
              0x774422
            </p>
          </li>
        </ol>
      </p>
    </statement>
  </exercise>
</section>