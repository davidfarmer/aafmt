<section xml:id="sec_ModularArithmetic_ModularEquations">
  <title>Modular equations<nbsp/><nbsp/></title>
  <figure>
    <video youtubeplaylist="PL2uooHqQ6T7PW5na4EX8rQX2WvBBdM8Qo"/>
  </figure>
  <subsection xml:id="subsec_ModularArithmetic_MoreUses">
    <title>More uses of modular arithmetic</title>
    <p>
      Supermarkets and retail stores have a nasty little secret.
      Every time you scan your purchases,
      they're using modular arithmetic on you!
      In fact, modular arithmetic is the basis for bar codes you see in stores.
      We will use these practical examples to introduce
      <em>modular equations</em>.
          <idx><h>Modular equations</h></idx>
    </p>
    <figure xml:id="groups_figure_3">
      <caption>A UPC code</caption>
      <image width="37%" source="images/UPCcode.png"/>
    </figure>
    <exercise xml:id="exercise_ModularArithmetic_UPCSymbols">
      <statement>
        <p>
          <term>Universal Product Code (UPC)</term>
              <idx><h>Code</h><h>UPC</h></idx>
          symbols are now found on most products in grocery and retail stores.
          The UPC symbol
          (see <xref ref="groups_figure_3">Figure</xref>)
          is a 12-digit code which identifies the manufacturer of a product and the product itself.
          The first 11 digits contain the information,
          while the twelfth digit is used to check for errors that may occur while scanning.
          If <m>d_1 d_2 \cdots d_{12}</m> is a valid UPC code, then
          <me>
            3 \cdot d_1 + 1 \cdot d_2 + 3 \cdot d_3 + \cdots + 3 \cdot d_{11} + 1 \cdot d_{12} \equiv 0 \pmod{10}
          </me>.
        </p>
        <p>
          So the scanning device that cashiers use reads the code and adds up the numbers mod 10.
          If they don't add to zero,
          then the device knows it hasn't scanned properly. (Smart little bugger,
          that scanner is!)
          <ol type="a">
            <li>
              <p>
                Show that the UPC number 0-50000-30042-6, which appears in <xref ref="groups_figure_3">Figure</xref>,
                is a valid UPC number.
              </p>
            </li>
            <li>
              <p>
                Show that the number 0-50000-30043-6 is not a valid UPC number.
              </p>
            </li>
            <li>
              <p>
                (<em>for geeks</em>) Write a program or Excel spreadsheet that will determine whether or not a UPC number is valid.
              </p>
            </li>
            <li>
              <p>
                One common scanning error occurs when two consecutive digits are accidentally interchanged.
                This is called a <term>transposition error</term>.
                  <idx><h>Transposition</h><h>error</h></idx>
              The UPC error detection scheme can catch most transposition errors.
                Using the UPC in (a) as the correct UPC, show that the transposition error 0-50003-00042-6 is detected.
                Find a transposition error that is not detected.
              </p>
            </li>
            <li>
              <p>
                Using the UPC in (a) as the correct UPC, show that the single-digit error 0-50003-30042-6 is detected.
              </p>
            </li>
            <li>
              <p>
                *Prove that the UPC error detection scheme detects all single digit errors. (*Hint*)
              </p>
            </li>
          </ol>
        </p>
      </statement>
    </exercise>
    <p>
      It is often useful to use an <term>inner product</term>
      notation<idx><h>Inner product</h><h>notation</h></idx> for these types of error detection schemes.<fn>
      You may have seen inner products (a.k.a.
      <q>dot products</q>
      ) in one of your math classes talking about vectors.
      </fn> In the following text, the notation
      <me>
        (d_1, d_2, \ldots, d_k ) \cdot (w_1, w_2, \ldots, w_k ) \equiv 0 \pmod{ n }
      </me>
      will be used to mean
      <me>
        d_1 w_1 +  d_2 w_2 + \cdots +  d_k w_k  \equiv 0  \pmod{ n}
      </me>.
    </p>
    <exercise xml:id="exercise_ModularArithmetic_ISBNCodes">
      <statement>
        <p>
          Every book has an <em>International Standard Book Number</em>
              <idx><h>Code</h><h>ISBN</h></idx>
          (ISBN-10) code.
              <idx><h>Error detection codes</h><h>ISBN</h></idx>
          This is a 10-digit code indicating the book's language,
          publisher and title.
          The first digit indicates the language of the book;
          the next three identify the publisher;
          the next five denote the title;
          and the tenth digit is a check digit satisfying
          <me>
            (d_1, d_2, \ldots, d_{10} ) \cdot (1, 2, \ldots, 10 )  \equiv 0 \pmod{11}
          </me>.
        </p>
        <p>
          ISBN-10 codes are nice in that all single-digit errors and most transposition errors can be detected.
          One complication is that <m>d_{10}</m> might have to be a 10 to make the inner product zero;
          in this case,
          the character <sq>X</sq> is used in the last place to represent 10.
          <ol type="a">
            <li>
              <p>
                Show that 3-540-96035-X is a valid ISBN-10 code.
              </p>
            </li>
            <li>
              <p>
                Is 0-534-91500-0 a valid ISBN-10 code?
                What about 0-534-91700-0 and 0-534-19500-0?
              </p>
            </li>
            <li>
              <p>
                How many different possible valid ISBN-10 codes are there?
              </p>
            </li>
            <li>
              <p>
                Write a formula of the form
                <m>d_{10} \equiv \ldots \pmod{\ldots}</m> to calculate the check digit in an ISBN-10 code. (*Hint*)
              </p>
            </li>
            <li>
              <p>
                Prove that any valid ISBN-10 code also satisfies:
                <me>
                  (d_1, d_2, \ldots, d_{10} ) \cdot (10, 9, \ldots, 1 )  \equiv 0 \pmod{11}
                </me>.
              </p>
            </li>
            <li>
              <p>
                Prove that if <m>(d_1, d_2, \ldots,d_9, d_{10} )</m> is a valid ISBN-10 code,
                then <m>(d_{10}, d_9, \ldots,
                d_2, d_1 )</m> is also a valid ISBN-10 code
                (as long as <m>d_{10}</m> is not equal to X).
              </p>
            </li>
            <li>
              <p>
                (<em>for geeks</em>) Write a computer program or Excel spreadsheet that calculates the check digit for the first nine digits of an ISBN code.
              </p>
            </li>
            <li>
              <p>
                A publisher has houses in Germany and the United States.
                Its German prefix is 3-540.
                Its United States prefix will be 0-<em>abc</em>.
                Find four possibilities for <em>abc</em>
                such that the rest of the ISBN code will be the same for a book printed in Germany and in the United States.
              </p>
            </li>
            <li>
              <p>
                *Prove that the ISBN-10 code detects all single digit errors. (*Hint*)
              </p>
            </li>
            <li>
              <p>
                *Prove that the ISBN-10 code detects all transposition errors. (*Hint*)
              </p>
            </li>
          </ol>
        </p>
      </statement>
    </exercise>
  </subsection>
  <subsection xml:id="subsec_ModularArithmetic_ModEq">
    <title>Solving modular equations</title>
    <p>
      In <xref ref="exercise_ModularArithmetic_ISBNCodes">Exercise</xref>
      part (h) you solved a modular equation with three variables by trial and error:
      you couldn't solve for one variable at a time,
      so you had to test out sets of values for <m>a</m>, <m>b</m>,
      <m>c</m> together and see if the the ISBN equation held.
      The UPC and ISBN error detection schemes themselves, given again below,
      are examples of modular equations with 12 and 10 variables,
      respectively:
      <me>
        (3 \cdot d_1) + (1 \cdot d_2) + (3 \cdot d_3) + \cdots + (3 \cdot d_{11}) + (1 \cdot d_{12}) \equiv 0 \pmod{10}
      </me>.
      <me>
        (d_1, d_2, \ldots, d_{10} ) \cdot (10, 9, \ldots, 1 )  \equiv 0 \pmod{11}
      </me>.
    </p>
    <p>
      Can the above equations be solved?
      You may remember from college algebra that a single equation with several variables usually has several solutions.
      If we want to narrow it down to a single solution we have to supply additional information,
      as in the following exercise.
    </p>
    <exercise xml:id="exercise_ModularArithmetic_check_digit">
      <statement>
        <p>
          Suppose you're given the following UPC: 1-54637-28190-?. Write a modular equation to solve for the missing check digit,
          then solve it.
        </p>
      </statement>
    </exercise>
    <p>
      In the preceding exercise you should have come up with an equation that looks like:
      <me>
        (3 \cdot 1) +  \ldots + (3 \cdot 0) + (1 \cdot x) \equiv 0 \pmod{10}
      </me>.
    </p>
    <p>
      How did you solve this?
      One possible method is to add up all the terms the left side of the equation short of the variable,
      and then figure out how much you need to add to that sum to get a number divisible by <m>10</m>.
      Keep this method and your own method
      (if different)
      in mind, as they are good intuition on how to solve these problems in general.
    </p>
    <p>
      Is there a <em>unique</em> answer for <m>x</m>?
      Practically,
      for a UPC code <m>x</m> must be between <m>0</m> and <m>9</m> (that is,
      <m>x \in {\mathbb Z}_{10}</m>:
      with this restriction, there is indeed only one solution.
      But if we remove that restriction,
      then there are many solutions.
      For instance <m>x=12</m> and <m>x =22</m> both work
      (check this for yourself).
      Can you think of any other integers that work?
    </p>
    <p>
      In fact any integer equivalent to <m>2 \pmod{10}</m> also works.
      But from our intuitive methods,
      would we have come up with these other possible solutions?
      In most cases not.
      Therefore we need to come up with a general method that will give us all possible integer solutions of a modular equation.
      Just as in basic algebra,
      we'll start with simpler equations and move to more complicated ones.
    </p>
    <example xml:id="example_ModularArithmetic_mod_eq_add">
      <statement>
        <p>
          Let's start with a basic modular equation involving addition:
          <idx><h>Modular equations</h><h>addition</h></idx>
          <me>
            8 + x \equiv 6 \pmod{11}
          </me>
        </p>
        <p>
          From algebra we understand how to solve an equation with an <m>=</m> sign,
          but what do we do with this <m>\equiv</m> sign?
          In fact, we can turn it in to an <m>=</m> sign by using <xref ref="proposition_ModularArithmetic_equivalence_alt">Proposition</xref>,
          which says that <m>8 + x \equiv 6 \pmod{11}</m> means the same as:
          <me>
            8 + x = k \cdot 11 + 6
          </me>
        </p>
        <p>
          And then we can solve for <m>x</m> like any other equation.
          The result is
          <me>
            x = k \cdot 11 - 2
          </me>
        </p>
        <p>
          So we solved for <m>x</m>, but what numbers does <m>x</m> actually equal?
          What does <m>k \cdot 11 - 2</m> mean?
          <m>k</m> is an integer, therefore <m>x</m> can equal -2
          (if <m>k = 0</m>),
          or -13
          (if <m>k = -1</m>),
          or 9
          (if <m>k = 1</m>),
          and so on.
          In other words <m>x</m> equals <m>-2</m> plus any integer multiple of <m>11</m>,
          which, by the definition of modular equivalence, means
          <me>
            x \equiv -2 \pmod{11}
          </me>
        </p>
        <p>
          This is a correct solution: but it's not the only way to write it.
          It would be just as valid to write
          <ul>
            <li>
              <p>
                <m>x \equiv -13 \pmod{11}</m>
              </p>
            </li>
            <li>
              <p>
                <m>x \equiv 20 \pmod{11}</m>
              </p>
            </li>
            <li>
              <p>
                <m>x \equiv 130 \pmod{11}</m>
              </p>
            </li>
            <li>
              <p>
                <m>\ldots</m>
              </p>
            </li>
          </ul>
        </p>
        <p>
          Notice however that there is only one way to write the solution in terms of a number in <m>{\mathbb Z}_{11}</m>, namely:
          <me>
            \bmod(x,11)=9
          </me>
        </p>
        <p>
          In order to avoid ambiguity,
          mathematicians and textbooks always write solutions mod <m>n</m> in terms of numbers in <m>{\mathbb Z}_n</m>.
          In our current example,
          it's easy enough to obtain the standard solution (<m>x \equiv 9 \pmod{11}</m>) directly from the equation
          <m>x = k \cdot 11 - 2</m>? by taking one of the <m>11</m>'s and adding it to the <m>-2</m> to get
          <me>
            x = (k-1) \cdot 11 + 11 - 2 = (k-1) \cdot 11 + 9
          </me>.
        </p>
        <p>
          Since <m>k</m> is an arbitrary integer,
          <m>k-1</m> is also an arbitrary integer.
          So we get <m>x \equiv 9 \pmod{11}</m>.
        </p>
      </statement>
    </example>
    <p>
      To summarize our general method for solving modular equations so far:
      <ol>
        <li>
          <p>
            Turn the <m>\equiv</m> sign into an <m>=</m> sign using the definition of modular equivalence.
            This introduces an additional variable <m>k</m>.
          </p>
        </li>
        <li>
          <p>
            Find (by trial and error if necessary) the value of <m>k</m> that puts <m>x</m> in the appropriate range.
          </p>
        </li>
        <li>
          <p>
            Change the equation back into an equivalence.
          </p>
        </li>
      </ol>
    </p>
    <exercise xml:id="exercise_ModularArithmetic_mod_eq_1">
      <statement>
        <p>
          Find all <m>x \in {\mathbb Z}</m> satisfying each of the following equations.
          <ol type="a">
            <li>
              <p>
                <m>5 + x \equiv 1 \pmod{ 3}</m>
              </p>
            </li>
            <li>
              <p>
                <m>25 + x \equiv 6 \pmod{ 12}</m>
              </p>
            </li>
          </ol>
        </p>
      </statement>
    </exercise>
    <p>
      Now let's spice things up with some multiplication:
    </p>
    <example xml:id="example_ModularArithmetic_mod_eq_mult1">
      <statement>
        <p>
          Given the equation
          <me>
            5x + 3 \equiv 9 \pmod{11}
          </me>.
        </p>
        <p>
          Using the definition of modular equivalence, this becomes
          <me>
            5x + 3 = 11k + 9
          </me>.
        </p>
        <p>
          Solving this equality using basic algebra gives us
          <me>
            x = \frac{11k + 6}{5}
          </me>.
        </p>
        <p>
          Now remember that <m>x</m> must be an <em>integer</em>.
          In order for the right side to be an integer,
          we need to find a <m>k</m> that makes <m>\frac{11k+6}{5}</m> an integer.
          At this point we may use trial and error to find a <m>k</m> in <m>{\mathbb Z}_5</m> such that
          <m>11 \cdot k + 6</m> is a multiple of <m>5</m>.
          We get <m>k=4</m>; and in fact adding
          <m>5\cdot n</m> to 4 also works for any <m>n \in {\mathbb Z}</m>,
          since <m>5n</m> is always divisible by <m>5</m>.
          Now we can solve for <m>x</m> by substituting <m>k=4+5n</m> back in to the previous equation:
          <md>
            <mrow>x =\amp  \dfrac{11(4 + 5\cdot n) + 6}{5}</mrow>
            <mrow>\amp =\dfrac{11\cdot 4 + 6}{5} + \dfrac{11 \cdot (5 n)}{5}</mrow>
            <mrow>\amp  = 10 + 11 n</mrow>
          </md>
        </p>
        <p>
          Therefore <m>x \equiv 10 \pmod{11}</m> is the general solution.
          You may check
          (which is always a good idea!)
          by plugging <m>10 + 11n</m> for a couple values of <m>n</m> back into the original equation,
          and you'll see these numbers work.
        </p>
      </statement>
    </example>
    <p>
      Just to make sure you've mastered the process,
      we'll give another example:
    </p>
    <example xml:id="example_ModularArithmetic_mod_eq_mult2">
      <statement>
        <p>
          To solve the equation <m>4x + 5 \equiv 7 \pmod{11}</m> we proceed step by step (note that the symbol
          <m>\implies</m> is mathematicians' shorthand for
          <q>implies</q>
          ):
          <md>
            <mrow>\amp 4x + 5 \equiv 7 \pmod{11}</mrow>
            <mrow>\implies \amp 4x + 5 = 11k + 7\amp \text{ (by modular equivalence) }</mrow>
            <mrow>\implies \amp x = \dfrac{11k + 2}{4}\amp \text{ (basic algebra) }</mrow>
          </md>
        </p>
        <p>
          Now, <m>11k + 2</m> is a multiple of <m>4</m> when <m>k = 2</m>,
          as well as when <m>k</m> equals <m>2</m> plus any multiple of <m>4</m>.
          Therefore <m>k = 2 + 4n</m>, hence we may continue from the previous equation:
          <md>
            <mrow>\amp x = \dfrac{2 + 11k }{4}</mrow>
            <mrow>\implies \amp x = \dfrac{ 2 + 11 \cdot (2 + 4n)}{4} \amp \text{ (substitution) }</mrow>
            <mrow>\implies \amp x = 6 + 11n. \amp \text{ (simplification) }</mrow>
          </md>
        </p>
        <p>
          Therefore <m>x \equiv 6 \pmod{11}</m> is the general solution.
        </p>
      </statement>
    </example>
    <remark>
      <p>
        <xref ref="example_ModularArithmetic_mod_eq_mult2">Example</xref>
        demonstrates some good practices that you can make use of when you write up your own proofs:
        <ul>
          <li>
            <p>
              Instead of using a sentence to explain your reasoning for each step,
              place the reason to the right in parentheses.
              This shrinks down the size of the proof.
            </p>
          </li>
          <li>
            <p>
              Another way to shrink the proof is to use mathematical equations,
              expressions,
              and symbols
              (such as <m>\implies, \forall</m>)
              whenever you can to accurately communicate your steps in the proof.
            </p>
          </li>
        </ul>
      </p>
    </remark>
    <p>
      In summary, a general method for solving modular equations is:
      <ol type="1">
        <li>
          <p>
            Turn the <m>\equiv</m> sign into an <m>=</m> sign using the definition of modular equivalence
            (just as with modular addition).
            This introduces another constant <m>k</m>.
          </p>
        </li>
        <li>
          <p>
            Solve the resulting equation for your variable <m>x</m>.
            If the expression is not a fraction, then go to step <m>5</m>.
            Otherwise, go to step <m>3</m>.
          </p>
        </li>
        <li>
          <p>
            By trial and error,
            find a value <m>k_0</m> for <m>k</m> which makes the fraction into an integer.
          </p>
        </li>
        <li>
          <p>
            Substitute <m>k_0</m> + <m>n \cdot</m>(denominator) in for <m>k</m>,
            and simplify.
          </p>
        </li>
        <li>
          <p>
            Change the equation back into an equivalence.
          </p>
        </li>
      </ol>
    </p>
    <exercise xml:id="exercise_ModularArithmetic_mod_eq_2">
      <statement>
        <p>
          Find all <m>x \in {\mathbb Z}</m> satisfying each of the following equations. (If there's no solution,
          then you can say
          <q>no solution</q>
          <ndash/> but show why!)
          <ol type="a">
            <li>
              <p>
                <m>9x \equiv 3 \pmod{ 5}</m>
              </p>
            </li>
            <li>
              <p>
                <m>5x \equiv 1 \pmod{ 6}</m>
              </p>
            </li>
            <li>
              <p>
                <m>7x \equiv 9 \pmod{ 13}</m>
              </p>
            </li>
            <li>
              <p>
                <m>8x \equiv 4 \pmod{ 12}</m>
              </p>
            </li>
            <li>
              <p>
                <m>11x \equiv 2 \pmod{ 6}</m>
              </p>
            </li>
            <li>
              <p>
                <m>27x \equiv 2 \pmod{ 9}</m>
              </p>
            </li>
            <li>
              <p>
                <m>3 + x \equiv 2 \pmod{ 7}</m>
              </p>
            </li>
            <li>
              <p>
                <m>5x + 1 \equiv 13 \pmod{ 23}</m>
              </p>
            </li>
            <li>
              <p>
                <m>5x + 1 \equiv 13 \pmod{ 26}</m>
              </p>
            </li>
            <li>
              <p>
                <m>3x + 2 \equiv 1 \pmod{ 6}</m>
              </p>
            </li>
          </ol>
        </p>
      </statement>
    </exercise>
    <p>
      One major disadvantage of our solution method is the use of trial and error in step <m>3</m>.
      If large numbers are involved,
      then this step can take a long time.
      However, there are techniques to speed things up:
    </p>
    <example xml:id="example_ModularArithmetic_speed_up1">
      <statement>
        <p>
          Consider the equation <m>79x \equiv 9 \pmod{15}</m>.
          In <xref ref="sec_ModularArithmetic_ModEquiv">Section</xref>
          we mentioned that when we're doing arithmetic mod <m>n</m>,
          we can replace any number with its remainder mod <m>n</m> without changing the answer.
          In this example then,
          we can replace the 79 with its remainder mod 15, which is 4.
          Thus we have
          <me>
            4x \equiv 9 \pmod{15}
          </me>,
          which leads to
          <me>
            x = \dfrac{15k +9}{4}
          </me>.
        </p>
        <p>
          By rewriting the numerator, we can simplify the right-hand side:
          <me>
            x = \dfrac{(12k + 3k) + (8 + 1)}{4} = 3k + 2 + \dfrac{3k + 1}{4}
          </me>.
          and we readily discover that
          <m>k=1 + 4n</m> makes the right-hand side an integer, so that
        </p>
        <p>
          <m>x = \dfrac{15\cdot(1+4n) +9}{4} = 6+15n</m>,
          or <m>x \equiv 6 \pmod{15}</m>.
        </p>
      </statement>
    </example>
    <p>
      Here's another example, which is just a little more complicated.
    </p>
    <example xml:id="example_ModularArithmetic_speed_up2">
      <statement>
        <p>
          To solve the equation <m>447x + 53 \equiv 712 \pmod{111}</m> we proceed as follows:
          <md>
            <mrow>447x + 53 \equiv\amp  712 \pmod{111}</mrow>
            <mrow>\implies 447x \equiv\amp  659 \pmod{111} \amp  \text{ (subtract 53 from both sides) }</mrow>
            <mrow>\implies 3x  \equiv\amp  104 \pmod{111} \amp \text{ (modular equivalence) }</mrow>
            <mrow>\implies 3x  =\amp  104 + 111k \amp \text{ (basic algebra) }</mrow>
            <mrow>\implies x =\amp  \frac{104 +111k}{3} \amp \text{ (basic algebra) }</mrow>
            <mrow>\implies x =\amp  34+\frac{2}{3} + 37k \amp \text{ (basic algebra) }</mrow>
          </md>
        </p>
        <p>
          It should be clear that no value of <m>k</m> makes the right side an integer.
          Hence <m>x</m> has no solution.
          You may have run into a similar situation in a previous exercise.
        </p>
      </statement>
    </example>
    <exercise xml:id="exercise_ModularArithmetic_modeq3">
      <statement>
        <p>
          Find all <m>x \in {\mathbb Z}</m> satisfying each of the following equations.
          <ol type="a">
            <li>
              <p>
                <m>112x \equiv 2 \pmod{ 6}</m>
              </p>
            </li>
            <li>
              <p>
                <m>74x \equiv 9 \pmod{ 13}</m>
              </p>
            </li>
            <li>
              <p>
                <m>856x \equiv 4 \pmod{ 123}</m> (*Hint*)
              </p>
            </li>
            <li>
              <p>
                <m>272x \equiv 24 \pmod{ 9}</m>
              </p>
            </li>
            <li>
              <p>
                <m>242x + 39 \equiv 489 \pmod{236}</m>
              </p>
            </li>
            <li>
              <p>
                <m>469x + 122 \equiv 1321 \pmod{ 231}</m>
              </p>
            </li>
            <li>
              <p>
                <m>246x + 200 \equiv 401 \pmod{ 81}</m>
              </p>
            </li>
            <li>
              <p>
                <m>339 + 411x \equiv 2 \pmod{ 297}</m>
              </p>
            </li>
            <li>
              <p>
                <m>530x - 183 \equiv 215 \pmod{ 128}</m>
              </p>
            </li>
          </ol>
        </p>
      </statement>
    </exercise>
    <p>
      From parts (h) and (i) of <xref ref="exercise_ModularArithmetic_modeq3">Exercise</xref>
      we see that even our trick with modular equivalences doesn't make all modular equations easy to solve.
      When the coefficient of <m>x</m> and the modulus are both large,
      you may end up needing <em>lots</em> of trial and error.
      Such
      <q>brute force</q>
      methods are rather distasteful to snobby mathematicians,
      who prefer
      <q>elegant</q>
      solutions.
      Later we'll talk about an
      <q>elegant</q>
      method (the Euclidean algorithm) that solves modular equations without any trial and error whatsoever.
    </p>
  </subsection>
</section>