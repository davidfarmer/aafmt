<section xml:id="sec_ModularArithmetic_ModularDivision">
  <title>Modular division<nbsp/><nbsp/></title>
  <figure>
    <video youtubeplaylist="PL2uooHqQ6T7PW5na4EX8rQX2WvBBdM8Qo"/>
  </figure>
  <introduction>
    <p>
      Before getting to modular division,
      we'll look at something else first.
      This all may seem irrelevant, but please be patient:
      we'll get to the point soon enough.
    </p>
  </introduction>
  <subsection xml:id="subsec_ModularArithmetic_StickyProblem">
    <title>A sticky problem</title>
    <p>
      The following problem may not seem to have anything to do with modular arithmetic,
      but it's an interesting problem and fun to think about. (And it turns out to be relevant after all!)<fn>
      This section is by David Weathers, edited by C.T.
      </fn>
    </p>
    <example xml:id="example_ModularArithmetic_2sticks">
      <statement>
        <p>
          Someone gives us a pencil and two unmarked sticks of lengths 52 cm and 20 cm respectively
          (see <xref ref="fig_1euclidean">Figure</xref>).
          We are told to make measuring sticks by using the pencil to make markings on the sticks.
          Question: what is the smallest length that we can accurately measure?
        </p>
        <figure xml:id="fig_1euclidean">
          <caption>Two sticks</caption>
          <image width="92.5%" source="images/2_sticks_step1.png"/>
        </figure>
        <p>
          Clearly we can measure 20 cm lengths with the shorter rod,
          but is it possible to make smaller measurements?
        </p>
        <p>
          Here's one way to look at the situation.
          Imagine for a moment that we lay the 20 cm measuring stick next to the 52 cm stick such that the ends line up.
          At that point we could make a 20 cm mark on the 52 cm stick
          (see <xref ref="fig_2">Figure</xref>).
        </p>
        <figure xml:id="fig_2">
          <caption>First mark</caption>
          <image width="92.5%" source="images/2_sticks_step2.png"/>
        </figure>
        <p>
          At this point we move the 20 cm stick further down the the 52 cm stick such that one end is on the pencil mark,
          and and make another mark.
          Now there are two 20 cm sections marked on the 52 cm stick,
          as shown in <xref ref="fig_3">Figure</xref>.
        </p>
        <figure xml:id="fig_3">
          <caption>Second mark</caption>
          <image width="92.5%" source="images/2_sticks_step3.png"/>
        </figure>
        <p>
          Since we know the sum of the marked sections is 40 cm,
          and the length of the large stick is 52 cm,
          the remainder of the distance must be 12 cm,
          as shown in <xref ref="fig_4">Figure</xref>.
          So we've actually made progress.
          At the beginning we were only able to measure lengths larger than 20 cm:
          but now we can measure 12 cm with the latest mark we've made.
        </p>
        <figure xml:id="fig_4">
          <caption>Remaining distance</caption>
          <image width="92.5%" source="images/2_sticks_step5.png"/>
        </figure>
        <p>
          But let's not stop there.
          We can use the 12 cm section to divide up the 20cm stick.
          This will subdivide the 20 cm stick into a 12 cm section and a 8 cm section,
          as shown in <xref ref="fig_5">Figure</xref>.
        </p>
        <figure xml:id="fig_5">
          <caption>More subdivision</caption>
          <image width="49%" source="images/2_sticks_step6.png"/>
          <image width="49%" source="images/2_sticks_step7.png"/>
        </figure>
        <p>
          Now we're rolling!
          Let's subdivide the 12 cm section using the 8 cm section.
          This will produce an 8 cm section and a 4 cm section
          (see <xref ref="fig_8">Figure</xref>).
        </p>
        <figure xml:id="fig_8">
          <caption>More subdivision</caption>
          <image width="49%" source="images/2_sticks_step8.png"/>
          <image width="49%" source="images/2_sticks_step9.png"/>
        </figure>
        <p>
          Now if we try to use the 4 cm section to subdivide any of the other sections,
          we will no longer have a remainder.
          This is because 4 cm evenly divides all the other lengths we have created,
          as shown in <xref ref="fig_9">Figure</xref>.
        </p>
        <figure xml:id="fig_9">
          <caption>More subdivision</caption>
          <image width="49%" source="images/2_sticks_step10.png"/>
          <image width="49%" source="images/2_sticks_step11.png"/>
          <image width="49%" source="images/2_sticks_step12.png"/>  <image width="49%" source="images/2_sticks_step13.png"/>
          <image width="49%" source="images/2_sticks_step14.png"/>  <image width="49%" source="images/2_sticks_step15.png"/>
          <image width="49%" source="images/2_sticks_step16.png"/>  <image width="49%" source="images/2_sticks_step17.png"/>
        </figure>
      </statement>
    </example>
    <exercise xml:id="exercise_ModularArithmetic_stick_units">
      <statement>
        <p>
          Using the method above, find the smallest measure given sticks of length:
          <ol type="a">
            <li>
              <p>
                30 cm and 77 cm.
              </p>
            </li>
            <li>
              <p>
                7 feet and 41 feet (Pretty long sticks!).
              </p>
            </li>
            <li>
              <p>
                33 in and 72 in.
              </p>
            </li>
          </ol>
        </p>
      </statement>
    </exercise>
    <p>
      While working on the exercises,
      you may have noticed that the units of measure used do not matter.
      The only thing that matters is the actual count of those units of measure.
    </p>
    <exercise xml:id="exercise_ModularArithmetic_m53">
      <statement>
        <p>
          Using the method above:
          <ol type="a">
            <li>
              <p>
                Convert the measurements in <xref ref="exercise_ModularArithmetic_stick_units">Exercise</xref> part (a) into millimeters,
                and solve the problem again.
                How is your result using millimeters related to your answer to part (a) in the previous exercise?
              </p>
            </li>
            <li>
              <p>
                Convert the measurements in <xref ref="exercise_ModularArithmetic_stick_units">Exercise</xref> part (b) into inches,
                and solve the problem again.
                How is your result using inches related to your answer to part (a) in the previous exercise?
              </p>
            </li>
            <li>
              <p>
                Use what you've discovered in part (b) to quickly find a solution to the two-sticks problem when one stick is 720 inches and the other is 600 inches.
              </p>
            </li>
          </ol>
        </p>
      </statement>
    </exercise>
  </subsection>
  <subsection xml:id="subsec_ModularArithmetic_gcd">
    <title>Greatest common divisors</title>
    <p>
      You may be familiar with the notion of greatest common divisor (gcd) of two numbers.
      The gcd is defined as the greatest number that divides the two given numbers. gcd's play a key role in modular arithmetic,
      as we shall see.
    </p>
    <p>
      The general question we now consider is: What's a good way to find the gcd of two integer numbers?
      It may be easy to find the gcd of small numbers like 12 and 20,
      but what if you have to find the gcd of 583768 and 260568447?
    </p>
    <p>
      At this point, let's think back to our two-sticks problem.
      We saw that when we began with sticks of length 52 and 20 we ended up with a minimum measurable distance of 4, which just so happens to be the gcd of 52 and 20.
      Was this a coincidence?
      Not at all!
      The minimum measureable distance has to evenly divide the two sticks' lengths,
      otherwise we could find a smaller measurable distance using the marking-off procedure described in the previous section.
      This implies that the minimum measureable distance must be a common divisor.
      To show that it's the <em>greatest</em>
      common divisor takes a little more work<ndash/>we'll give the proof below.
      For now, we'll assume that the minimum measureable distance is in fact the gcd.
    </p>
    <p>
      So to get the gcd of 583768 and 260568447,
      in theory we could try creating one stick of length 583768 and another of length 260568447 and follow the same procedure.
      Of course this isn't practical.
      So instead, we'll try to duplicate the same procedure mathematically,
      without resorting to actual sticks.
      Notice that when we subdivided a larger stick of length <m>a</m> into sections of the length of <m>b</m>,
      the result was essentially the same as dividing <m>a</m> by <m>b</m> while leaving a remainder <m>r</m>.
      See if you can complete the connection in the following example.
    </p>
    <example xml:id="example_ModularArithmetic_GCD">
      <statement>
        <p>
          Let's use algebraic language to express the two-sticks algorithm applied to 52 and 20.
          Let's start by setting this up as a division problem with a remainder
          (recall <xref ref="proposition_ModularArithmetic_DivAlg">Proposition</xref>),
          since this is effectively what is being done in the stick example above.
          <me>
            52 = 20\cdot q_1 + r_1
          </me>,
          where <m>q_1</m> and <m>r_1</m> are integers
          (we put the subscript <sq>1</sq> on the variables <m>q_1</m> and <m>r_1</m> because we're going to repeat the process).
          By division with remainder we find <m>q_1=2</m> and <m>r_1=12</m>.
          Now we repeat the process,
          but this time dividing the remainder 12 into the smaller stick length 20:
          <me>
            20 = 12\cdot q_2 + r_2
          </me>,
          which yields <m>q_2=1, r_2=8</m>.
          Here we go again,
          this time dividing the second remainder 8 into the first remainder 12:
          <me>
            12 = 8\cdot q_3 + r_3
          </me>
        </p>
        <p>
          This yields <m>q_3=1, r_3=4</m>.
          One more time,
          this time dividing the new remainder 4 into the previous remainder 8:
          <me>
            8 = 4\cdot q_4 + r_4
          </me>
        </p>
        <p>
          This yields <m>q_4=2, r_4=0</m>.
        </p>
        <p>
          Now notice that 8 is divisible by 4.
          In the equation before that, we have <m>12 = 4\cdot2 + 4</m>.
          Since the right hand side is a sum of multiples of 4, the left hand side must also be a multiple of 4.
          In the next equation up <m>20=12\cdot x + 8</m> again,
          the right hand side is a sum of multiples of 4, so the left hand side must also be a multiple of 4.
          Continuing this logic upward shows that all intervals created along the way are divisible by 4.
          Hence the algorithm has generated a divisor of the original lengths 52 and 20.
          In summary, the <em>last nonzero remainder</em> gave us the gcd.
        </p>
        <p>
          The procedure we have just described is called the
          <term>Euclidean algorithm</term>.
              <idx><h>Euclidean algorithm</h></idx>
          (An <em>algorithm</em> is a mathematical procedure designed to compute a specific result).
          The Euclidean algorithm is very powerful,
          and in fact can be used to calculate gcd's of large numbers as we'll see below.
        </p>
      </statement>
    </example>
    <p>
      As noted above,
      the divisor produced by the Euclidean algorithm turned out to be the greatest common divisor.
      Let's prove this in general.
    </p>
    <proposition xml:id="proposition_ModularArithmetic_Greatest_Common_Divisor">
      <statement>
        <p>
          The Euclidean algorithm applied to two integers will give the gcd of those two integers.
        </p>
      </statement>
    </proposition>
    <proof>
      <p>
        This proof is broken up into two parts, (A) and (B).
        Part (A) shows that the algorithm always produces a divisor of the two given integers.
        Part (B) shows that the produced divisor is indeed the gcd.
        <ol type="A">
          <li>
            <p>
              Given integers <m>a</m> and <m>b</m> and <m>a>b</m> if we were to plug them into the Euclidean Algorithm we get:
              <me>
                a = b\cdot q_1 + r_1
              </me>
              <me>
                b = r_1\cdot q_2 + r_2
              </me>
              <me>
                r_1 = r_2\cdot q_3 + r_3
              </me>
              <me>
                \vdots
              </me>
              until there is an equation with no remainder left.
              <me>
                r_{k-2} = r_{k-1}\cdot q_{k-1} + r_k
              </me>
              <me>
                r_{k-1} = r_k\cdot q_k + 0
              </me>
              It is clear that <m>r_k</m> divides <m>r_{k-1}</m>.
              Consider the next equation up.
              <me>
                r_{k-2} = r_{k-1}\cdot q_{k-1} + r_k = r_{k}\cdot q_{k-1} \cdot q_{k} + r_k
              </me>
              This shows that <m>r_{k}</m> divides the right hand side,
              so <m>r_{k}</m> must divide <m>r_{k-2}</m>.
              In the next equation up,
              the right can be set up as multiples of <m>r_{k}</m> which means the next <m>r</m> term is divisible by <m>r_k</m> Continue all the way to the top and it must be that <m>r_k</m> divides both <m>a</m> and <m>b</m>
            </p>
          </li>
          <li>
            <p>
              Now suppose there is another number <m>c</m> that divides <m>a</m> and <m>b</m> such that
              <m>a_1 \cdot c = a</m> and <m>b_1 \cdot c = b</m>.
              We can rewrite the initial equation of the algorithm as follows.
              <me>
                a_1\cdot c = (b_1 \cdot c)\cdot q_1 + r_1 \Rightarrow a_1\cdot c - (b_1 \cdot c)\cdot q_1 = r_1
              </me>
              This shows that <m>c</m> must divide <m>r_1</m>.
              Consider the next equation.
              <me>
                b_1\cdot c = (r_1)\cdot q_2 + r_2 \Rightarrow b_1\cdot c - (r_1)\cdot q_2 = r_2
              </me>
              Since <m>c</m> divides both <m>r_1</m> and <m>b_1</m> then <m>c</m> must divide <m>r_2</m> also.
              Repeat all the way to the bottom and <m>c</m> will have to divide <m>r_k</m>.
              Since <m>c</m> divides <m>r_k</m>,
              <m>c</m> is no larger than <m>r_k</m>.
              So all divisors of <m>a</m> and <m>b</m> must be no larger than <m>r_k</m>.
              From part (A) we know that <m>r_k</m> divides both <m>a</m> and <m>b</m>.
              Therefore <m>r_k</m> must be the gcd of <m>a</m> and <m>b</m>.
            </p>
          </li>
        </ol>
      </p>
    </proof>
    <p>
      The Euclidean algorithm may be summarized as follows.
      <ol type="1">
        <li>
          <p>
            Start with two integers <m>a</m> and <m>b</m> where <m>a > b</m>
          </p>
        </li>
        <li>
          <p>
            Divide <m>b</m> into <m>a</m> and find the remainder <m>r</m>
          </p>
        </li>
        <li>
          <p>
            If <m>r</m> = 0, <m>b</m> is the greatest common divisor.
          </p>
        </li>
        <li>
          <p>
            If the remainder is not 0, then replace <m>a</m> with <m>b</m> and <m>b</m> with <m>r</m> and return to step 1.
          </p>
        </li>
      </ol>
    </p>
    <exercise xml:id="exercise_ModularArithmetic_gcd">
      <statement>
        <p>
          What is the greatest common divisor of:
          <ol type="a">
            <li>
              <p>
                1168 and 2338?
              </p>
            </li>
            <li>
              <p>
                2343 and 4697?
              </p>
            </li>
            <li>
              <p>
                1006 and 13581?
              </p>
            </li>
          </ol>
        </p>
      </statement>
    </exercise>
    <p>
      Let's analyze this algorithm just a little further.
      In the first step when we divide <m>a</m> by <m>b</m>,
      the remainder satisfies the equation,
      <m>r_1 = a - q_1\cdot b</m>, where <m>q</m> is an integer.
      In other words, <m>r_1</m> can be written in the general form:
      <m>r_1 = n \cdot a + m \cdot b</m>,
      where <m>n</m> and <m>m</m> are integers.
    </p>
    <exercise xml:id="exercise_ModularArithmetic_71">
      <statement>
        <ol type="a">
          <li>
            <p>
              Show that <m>r_2</m> can also be written in the form:
              <m>r_2 = n \cdot a + m \cdot b</m>,
              where <m>n</m> and <m>m</m> are integers.
            </p>
          </li>
          <li>
            <p>
              Show that for <m>k>2</m>,
              if <m>r_{k-2}</m> and <m>r_{k-1}</m> can both be written in the form
              <m>n \cdot a + m \cdot b</m> where <m>n</m> and <m>m</m> are integers,
              then <m>r_k</m> can also be written in the same form.
            </p>
          </li>
          <li>
            <p>
              Show that the gcd of two numbers <m>a</m> and <m>b</m> can always be written in the form
              <m>n \cdot a + m \cdot b</m> where <m>n</m> and <m>m</m> are integers.
            </p>
          </li>
        </ol>
      </statement>
    </exercise>
    <p>
      The above exercise amounts to an inductive proof of the following proposition.
    </p>
    <proposition xml:id="proposition_ModularArithmetic_Lin_comb">
      <statement>
        <p>
          The gcd of two numbers <m>a</m> and <m>b</m> can be written in the form
          <m>n \cdot a + m \cdot b</m> where <m>n</m> and <m>m</m> are integers.
        </p>
      </statement>
    </proposition>
    <p>
      This proposition will be useful in the next section.
    </p>
  </subsection>
  <subsection xml:id="subset_ModularArithmetic_ComputerStuff">
    <title>Computer stuff</title>
    <p>
      For the computationally inclined reader here are two examples,
      in C++ syntax,
      of functions that calculate the greatest common divisor.
    </p>
<pre>
int gcdLoop (int a, int b){
int divisee=a;
int divisor=b;
int remainder;
//if they are the same, then either is the greatest divisor
if (a == b)
return a;
//If a &lt; b, then switch, otherwise the algorithm will not work.
if (a &lt; b){
divisee=b;
divisor=a;
}
// At this point, a is the larger of the two numbers
do{
// '%' returns the remainder of the integer division.
remainder = divisee % divisor;
//Set up the next iteration if the remainder is not 0 --
// if the remainder is 0, then we're done
if (remainder !=0){
divisee = divisor;
divisor = remainder;}
else
{break;}
while (1);
return divisor;
}
</pre>
    <p>
      This second example is also in C++, but uses recursion.
    </p>
<pre>
int gcdRecurse (int a, int b){
int remainder;
if (a == b)
return a;
if (a &lt;$ b)
{
//'%' returns the remainder of the integer division
remainder = b % a;
if (remainder == 0)
return a;
else
return gcdRecurse(a, remainder);
}
else
{
remainder = a % b;
if (remainder == 0)
return b;
else
return gcdRecurse(b, remainder);
}
//By calling itself, it will repeat the process until the remainder is 0
}
</pre>
    <exercise xml:id="exercise_ModularArithmetic_Computer_exercise">
      <statement>
        <p>
          Create a spreadsheet
          (with Excel, LibreOffice, or OpenOffice)
          that calculates the gcd of two integers that uses the procedure above.
          Excel has a built-in gcd function,
          but you're not allowed to use it for this exercise.But you may use the MOD function:
          <q>=MOD(A2,B2)</q>
          will compute the remainder when A2 is divided by B2.
          You may refer to the spreadsheet in <xref ref="fig_gcd_spreadsheet">Figure</xref> for ideas.
        </p>
      </statement>
    </exercise>
    <figure xml:id="fig_gcd_spreadsheet">
      <caption>Spreadsheet for computing gcd</caption>
      <image width="46%" source="images/gcd_spreadsheet.png"/>
    </figure>
  </subsection>
  <subsection xml:id="subsec_ModularArithmetic_diophantine">
    <title>Diophantine equations</title>
    <p>
      Let's look now at another type of problem,
      which has played a key role in the history of mathematics.
    </p>
    <definition>
      <statement>
        <p>
          {dioequiv} A <term>Diophantine equation</term>
              <idx><h>Diophantine equation</h></idx>
              <idx><h>Equation,Diophantine</h></idx>
          in the variables <m>m, n</m> is an equation of the form
          <me>
            a \cdot m + b \cdot n = c
          </me>
          where <m>a,b,c</m> are integers,
          and <m>m</m> and <m>n</m> are assumed to have integer values.
        </p>
      </statement>
    </definition>
    <example xml:id="example_ModularArithmetic_gcdintMultiples">
      <statement>
        <p>
          Find all integers <m>m</m> and <m>n</m> such that <m>16 m + 42 n = 8</m>.
        </p>
        <p>
          To solve this,
          let us list each of the steps in finding the gcd of 42 and 16,
          as we explained in the previous section:
          <me>
            42 = (16)\cdot 2 + 10
          </me>
          <me>
            16 = (10)\cdot 1 + 6
          </me>
          <me>
            10 = (6)\cdot 1 + 4
          </me>
          <me>
            6 = (4)\cdot 1 + 2
          </me>
        </p>
        <me>
          4 = (2)\cdot 2 + 0
        </me>
        <p>
          Now let's start over again,
          but this time we'll keep track of what we're doing.
          If we start at the top of the list,
          but move the <m>16\cdot2</m> to the other side of the equation,
          this yields:
          <me>
            42 \cdot 1 + 16 \cdot (-2) = 10
          </me>.
        </p>
        <p>
          Let's define a shorthand
          <q>pair notation</q>
          for the left-hand side.
          Let's represent any expression of the form <m>42\cdot x + 16 \cdot y</m> as <m>(x,y)</m>.
          Using this rule, we denote
          <m>42 \cdot 1 + 16 \cdot (-2)</m> by the pair <m>(1,-2)</m>.
          Then our previous equation can represented in
          <q>pair notation</q>
          as:
          <me>
            (1,-2) = 10
          </me>.
        </p>
        <p>
          This
          <q>vector notation</q>
          can save a lot of writing over the course of a long computation.
        </p>
        <p>
          Now consider the next equation down the list,
          which is <m>16 = (10)\cdot 1 + 6</m>.
          Using pair notation, we can write 16 with (0,1)
          (since <m>16 = 42 \cdot 0 + 16 \cdot 1</m>).
          We've already seen that <m>10 = (1,-2)</m>, so we get:
          <me>
            (0,1) = (1,-2) + 6
          </me>.
        </p>
        <p>
          Now we can move the <m>(1,-2)</m> to the left-hand side and subtract it from <m>(0,1)</m> to get:
          <me>
            (-1,3) = 6
          </me>.
        </p>
        <p>
          Now the next equation down the list is <m>10 = (6)\cdot 1 + 4</m>.
          Making similar replacements, we find:
          <me>
            (1,-2) = (-1,3) + 4\Rightarrow (2,-5) = 4
          </me>.
        </p>
        <p>
          Repeat again for the next equation down the list:
          <m>6 = (4)\cdot 1 + 2</m>, which gives:
          <me>
            (-1,3) = (2,-5) + 2 \Rightarrow (-3,8) = 2
          </me>.
        </p>
        <p>
          At this point, we've gone as far as we can go. (Verify this:
          what happens if you try to continue?) Now if we replace the pair notation <m>(-3,8)</m> with what it originally represents, we get:
          <me>
            42\cdot ( -3) + 16 \cdot 8 = 2
          </me>.
        </p>
        <p>
          If we multiply this equation by 4, we have
          <me>
            42 \cdot( -12) + 16 \cdot 32 = 8
          </me>.
        </p>
        <p>
          It follows that <m>m=32,
          n=-12</m> is an integer solution to our original equation,
          <m>16m + 42n = 8</m>.
        </p>
        <p>
          Unfortunately we're not quite done yet,
          because we're supposed to find <em>all</em> integer solutions.
          But we do have a particular solution,
          and we can leverage this information as follows.<fn>
          What we're doing here  is a common ploy in mathematics.
          We're using a <em>particular</em>
          solution to reduce the problem to a
          <em>homogeneous</em> equation
          (if you're not familiar with this terminology,
          then don't worry about it).
          Exactly the same method is used in differential equations,
          and in linear algebra.
          </fn> Suppose that <m>m,n</m> is an arbitrary solution,
          so that <m>42n + 16m = 8</m>.
          We may subtract from this equality the equation for the particular solution <m>m=-12, n=32</m>:
          <me>
            \begin{array}{rcrcl } 42n \amp ~~+\amp  16m  \amp =\amp  8  \\ -~ (42(-12) \amp ~~+\amp  16(32)  \amp =\amp   8)   \\ \cline{1-5} 42(n+12) \amp ~~+\amp  16(m-32) \amp =\amp  0 \end{array}
          </me>
        </p>
        <p>
          Rearranging and dividing by common factors, we obtain:
          <me>
            21(n+12) = -8(m-32)
          </me>.
        </p>
        <p>
          Now since the right-hand side is divisible by 8, then the left-hand side must also be divisible by 8.
          This implies that <m>n+12</m> must be divisible by 8, or
          <me>
            n+12 = 8k~~~(\text{ for some integer } ~k)
          </me>.
        </p>
        <p>
          If we plug this in to the equation just above, we get:
          <me>
            21(8k) = -8(m-32),~~\text{ or } ~~m-32 = -21k
          </me>.
        </p>
        <p>
          We may rearrange to obtain finally:
          <me>
            m = 32 - 21k ~~\text{ and } ~~ n = -12 + 8k~~~(\text{ where } k \text{  is an arbitrary integer) }
          </me>
          as the most general solution to <m>16m + 42n = 8</m>.
        </p>
      </statement>
    </example>
    <example>
      <statement>
        <p>
          We'll give another example, giving just the computations and no other words.
          We find integer solutions to <m>1053x + 863y =245</m> as follows:
          <md>
            <mrow>1053 = 863 + 190 \amp \implies 190 = (1,-1)</mrow>
            <mrow>863 = 4 \cdot 190 +103 \amp  \implies 103 = (0,1) - 4\cdot (1,-1) = (-4,5)</mrow>
            <mrow>190 = 103 + 87 \amp \implies 87 = (1,-1) - (-4,5) = (5,-6)</mrow>
            <mrow>103 = 87  + 16 \amp \implies 16 = (-4,5) - (5,-6) = (-9,11)</mrow>
            <mrow>87 = 5 \cdot 16 + 7 \amp \implies 7 = (5,-6) - 5\cdot (-9,11) = (50,-61)</mrow>
            <mrow>16 = 2 \cdot 7 + 2 \amp \implies 2 = (-9,11) - 2 \cdot(50,-61) = (-109,133)</mrow>
            <mrow>7 = 3 \cdot 2 + 1 \amp \implies 1 = (50,-61) - 3 \cdot(-109,133) = (377 -460)</mrow>
          </md>.
        </p>
        <p>
          This means that:
          <m>377 \cdot 1053 - 460 \cdot 863 = 1</m> (You may check this on a calculator.)
        </p>
        <p>
          Now we may multiply both sides by 245, which gives:
          <me>
            (245 \cdot 377)\cdot 1053 - (245 \cdot 460)\cdot 863 = 245
          </me>.
        </p>
        <p>
          Thus <m>x=(245 \cdot 377) =92365</m> and <m>y=- (245 \cdot 460) =-112700</m>, so that
          <me>
            1053 \cdot 92365  - 863 \cdot 112700 = 245
          </me>
          is an integer solution.
        </p>
        <p>
          To find <em>all</em> integer solutions,
          we suppose that <m>(x,y)</m> is an arbitrary solution to <m>1053x + 863y = 245</m>.
          We can subtract our computed solution to give:
          <me>
            1053(x-92365) + 863(y+112700) = 0
          </me>,
          or
          <me>
            1053(x-92365) = -863(y+112700)
          </me>.
        </p>
        <p>
          The left-hand side is divisible by 1053,
          and our computation shows that gcd(1053,863)=1, so by <em>Euclid's Lemma</em>
          (<xref ref="proposition_ComplexNumbers_EuclidLemma">Proposition</xref>
          in <xref ref="ComplexNumbers">Chapter</xref>)
          it must be the case that by
          <m>y + 112700</m> is also divisible by 1053.
          If we write <m>y + 112700 = 1053k</m>,
          it follows by algebra that <m>x - 92365 = -863k</m>.
          This means that
          <me>
            x = 92365 - 863k,~~ y = -112700 + 1053k
          </me>
          is the most general solution.
        </p>
        <p>
          This solution is correct,
          but we can simplify it by shifting the value of <m>k</m>.
          Note that <m>92365 = 107 \cdot 863 + 24</m> and <m>112700 = 107 \cdot 1053 + 29</m>.
          So we may replace <m>k</m> with <m>(\ell + 107)</m> to obtain:
          <me>
            x = 92365 - 863(\ell + 107), y = -112700 + 1053(\ell + 107)
          </me>,
          which after working out the algebra gives us:
          <me>
            x = 24 - 863 \ell, y = 29 + 1053 \ell
          </me>.
        </p>
      </statement>
    </example>
    <exercise xml:id="exercise_ModularArithmetic_dio1">
      <statement>
        <p>
          Using the process above,
          find all integer solutions to the following equations.
          <ol type="a">
            <li>
              <p>
                <m>45m + 16n = 27</m>
              </p>
            </li>
            <li>
              <p>
                <m>360m + 14n = 32</m>
              </p>
            </li>
            <li>
              <p>
                <m>389m + 50n = 270</m>
              </p>
            </li>
            <li>
              <p>
                <m>4801m + 500n = 1337</m>
              </p>
            </li>
            <li>
              <p>
                <m>3524m + 7421n = 333</m>
              </p>
            </li>
            <li>
              <p>
                <m>20m + 17n = 12</m>
              </p>
            </li>
          </ol>
        </p>
      </statement>
    </exercise>
    <exercise xml:id="exercise_ModularArithmetic_DiophantineSS">
      <statement>
        <p>
          Modify the spreadsheet from <xref ref="exercise_ModularArithmetic_Computer_exercise">Exercise</xref>
          to find the coefficients <m>n</m> and <m>m</m> such that
          <m>na + mb = \gcd(a,b)</m> for given integers <m>a,b</m>.
          Refer to <xref ref="fig_gcd_spreadsheet_with_coefs">Figure</xref> for ideas.
        </p>
      </statement>
    </exercise>
    <figure xml:id="fig_gcd_spreadsheet_with_coefs">
      <caption>Spreadsheet for computing gcd</caption>
      <image width="84%" source="images/gcd_spreadsheet_with_coefs.png"/>
    </figure>
    <p>
      Do all Diophantine equation have solutions?
      Let's investigate.
    </p>
    <exercise xml:id="exercise_ModularArithmetic_diophant">
      <statement>
        <p>
          Explain why the following Diophantine equations have no integer solutions.
          <ol type="a">
            <li>
              <p>
                <m>2m + 4n = 1</m> (*Hint*)
              </p>
            </li>
            <li>
              <p>
                <m>3m + 27n = 2</m>
              </p>
            </li>
          </ol>
        </p>
      </statement>
    </exercise>
    <p>
      The previous exercise shows that not all Diophantine equations can be solved.
      The following proposition shows which can and cannot be solved.
    </p>
    <proposition xml:id="proposition_ModularArithmetic_74">
      <statement>
        <p>
          Given the Diophantine equation <m>an + bm = c</m>,
          where <m>a,b,c</m> are integers.
          Then the equation has integer solutions for <m>n</m> and <m>m</m> if and only if <m>c</m> is a multiple of the gcd of <m>a</m> and <m>b</m>.
        </p>
      </statement>
    </proposition>
    <proof>
      <p>
        Since this is an
        <q>if and only if</q>
        proof, we need to prove it both ways.
        We'll do
        <q>only if</q>
        here, and leave the other way as an exercise.
      </p>
      <p>
        Since we're doing the
        <q>only if</q>
        part, we assume that <m>an + bm = c</m> is solvable.
        We'll represent the gcd of <m>a</m> and <m>b</m> by the letter <m>d</m>.
        Since gcd(<m>a,b</m>) divides both <m>a</m> and <m>b</m>,
        we may write <m>a = da'</m> and <m>b = db'</m> for some integers <m>a',b'</m>.
        By basic algebra, we have <m>an+bm =d(a'n +b'm)</m>.
        If we substitute this back in the original Diophantine equation, we get:
        <me>
          d(a'n +b'm)=c
        </me>
      </p>
      <p>
        It follows that <m>c</m> is a multiple of,
        <m>d</m>, which is the gcd of <m>a</m> and <m>b</m>.
      </p>
    </proof>
    <exercise xml:id="exercise_ModularArithmetic_prop74">
      <statement>
        <p>
          Prove the
          <q>if</q>
          part of <xref ref="proposition_ModularArithmetic_74">Proposition</xref>. (*Hint*)
        </p>
      </statement>
    </exercise>
    <p>
      At the beginning of this section, we
      <q>introduced</q>
      Diophantine equations.
      But we have seen them before:
    </p>
    <exercise xml:id="exercise_ModularArithmetic_m518">
      <statement>
        <ol type="a">
          <li>
            <p>
              Find the general integer solution to:
              <m>242m + 119n = 53</m>.
            </p>
          </li>
          <li>
            <p>
              Use your solution to solve the modular equation:
              <m>242x \equiv 53 \pmod{119}</m>.
            </p>
          </li>
          <li>
            <p>
              Use your solution to solve the modular equation:
              <m>119y \equiv 53 \pmod{242}</m>.
            </p>
          </li>
        </ol>
      </statement>
    </exercise>
    <p>
      This example shows that Diophantine equations are just modular equations in a disguised form!
      Furthermore, each Diophantine equation is associated with
      <em>two</em> modular equations:
    </p>
    <exercise xml:id="exercise_ModularArithmetic_m519">
      <statement>
        <p>
          Given that <m>(m,n)</m> is a solution to <m>a \cdot m + b \cdot n = c</m>,
          give (a) a modular equation with base <m>b</m> involving the constants <m>a</m> and <m>c</m> which has <m>m</m> as a solution;
          and (b) a modular equation with base <m>a</m> involving the constants <m>b</m> and <m>c</m> which has <m>n</m> as a solution.
        </p>
      </statement>
    </exercise>
    <p>
      In <xref ref="example_ModularArithmetic_speed_up2">Example</xref>,
      we saw that not all equations of the form <m>ax \equiv c \pmod b</m> have an answer.
      We now have the means to determine which modular arithmetic equations have an answer:
    </p>
    <proposition xml:id="proposition_ModularArithmetic_mod_eq_solution">
      <statement>
        <p>
          Given a modular equation <m>ax \equiv c\pmod{b}</m>,
          where <m>a,b,c</m> are integers.
          Then the equation has an integer solution for <m>x</m> if and only if <m>c</m> is an integer multiple of the greatest common divisor of <m>a</m> and <m>b</m>.
        </p>
      </statement>
    </proposition>
    <exercise xml:id="exercise_ModularArithmetic_propiff">
      <statement>
        <p>
          Prove both the
          <q>if</q>
          and the
          <q>only if</q>
          parts of <xref ref="proposition_ModularArithmetic_mod_eq_solution">Proposition</xref>. (*Hint*)
        </p>
      </statement>
    </exercise>
    <exercise xml:id="exercise_ModularArithmetic_m522">
      <statement>
        <p>
          Which of the following equations have integer solutions?
          If solutions exist, find them all.
          If no solutions exist, prove it!
          <ol type="a">
            <li>
              <p>
                <m>15x \equiv 3 \pmod{12}</m>
              </p>
            </li>
            <li>
              <p>
                <m>4x \equiv 17 \pmod{23}</m>
              </p>
            </li>
            <li>
              <p>
                <m>503x \equiv 919 \pmod{1002}</m>
              </p>
            </li>
            <li>
              <p>
                <m>504x \equiv 919 \pmod{1002}</m>
              </p>
            </li>
            <li>
              <p>
                <m>423x + 60 \equiv 720 \pmod{101}</m>
              </p>
            </li>
          </ol>
        </p>
      </statement>
    </exercise>
    <p>
      To close off this section, we take care of some unfinished business.
      Way back when we were showing the existence of irrational numbers,
      we made use of <em>Euclid's lemma</em>
      (<xref ref="proposition_ComplexNumbers_EuclidLemma">Proposition</xref>
      in <xref ref="ComplexNumbers">Chapter</xref>).
      We weren't able to give a real proof then<ndash/>but now we can,
      thanks to <xref ref="proposition_ModularArithmetic_74">Proposition</xref>.
          <idx><h>Euclid's lemma</h><h>proof</h></idx>
      In the proof, we use the terms
      <q>prime</q>
      and
      <q>relatively prime</q>: recall that a prime number is a natural number <m>>1</m> whose only factor <m>>1</m> is itself (<xref ref="definition_ComplexNumbers_defPrime">Definition</xref>);
      and two numbers are <em>relatively prime</em>
      if they have no common factors <m>>1</m>.
          <idx><h>Prime</h><h>relatively</h></idx>
          <idx><h>Relatively prime</h><h>definition</h></idx>
    </p>
    <exercise xml:id="exercise_ModularArithmetic_EuclidLemmaProof">
      <statement>
        <ol type="a">
          <li>
            <p>
              Let <m>p</m> be a prime, and let <m>a</m> be an integer.
              Show that <m>a</m> is relatively prime to <m>p</m> if and only if there exist integers <m>m</m> and <m>n</m> such that <m>pm + an=1</m>. (*Hint*)
            </p>
          </li>
          <li>
            <p>
              Suppose <m>p</m> is prime,
              and suppose <m>a</m> is relatively prime to <m>p</m>.
              Suppose also that <m>p</m> divides <m>ab</m>.
              By multiplying the equation in part (a) by <m>b</m>,
              show that <m>p</m> must divide <m>b</m>. (*Hint*)
            </p>
          </li>
          <li>
            <p>
              Prove <term>Euclid's Lemma</term>: Let <m>p</m> be a prime number,
              and let <m>a</m> and <m>b</m> be integers.
              If <m>p</m> divides <m>ab</m>,
              then either <m>p</m> divides <m>a</m> or <m>p</m> divides <m>b</m>. (*Hint*)
            </p>
          </li>
        </ol>
      </statement>
    </exercise>
    <p>
      Euclid's lemma can be used to prove another
      <q>obvious</q>
      fact about natural numbers that
      <q>everybody knows</q>
      (but few people can prove): namely,
      that all natural numbers greater than 1 can be factored as a product of primes in exactly one way.
      This fact is known as the <term>Fundamental Theorem of Arithmetic</term>.
      There are two parts to the proof:
      first, showing that such a factorization alwasy exists;
      and second, that there is only one way to do it
      (up to rearrangement of the factors).
      Both parts may be proved by induction,
      and a proof of the first part is given in <xref ref="sec_Induction_StrongInduction">Section</xref>.
    </p>
  </subsection>
  <subsection xml:id="subsec_ModularArithmetic_MultInve">
    <title>Multiplicative inverse for modular arithmetic</title>
    <p>
      This section is supposed to be about modular division,
      but so far we've been talking about all kinds of other stuff.
      You may be wondering, So where's the modular division?
      You're about to find out!
    </p>
    <p>
      Recall that the set <m>\mathbb{Z}_n</m> under the operation <m>\oplus</m> forms a group:
      it has closure, it's associative,
      it has an additive identity, and all elements have inverses.
      On the other hand <m>\mathbb{Z}_n</m> does not form a group under <m>\odot</m> for any <m>n \ge 2</m>.
    </p>
    <p>
      Why is this?
      Because the inverse property fails for the element 0.
      The multiplicative identity must be 1, yet
      <m>0\cdot m \neq 1</m> for all <m>m\in \mathbb{Z}_n</m>.
    </p>
    <p>
      But let's not give up so easily in our quest to form multiplicative groups.
      Since it appears that 0 is a problem,
      suppose we take all the elements of <m>\mathbb{Z}_n</m> <em>except</em> 0?
      We write the set of nonzero elements of
      <m>\mathbb{Z}_n</m> as <m>\mathbb{Z}_n \setminus \{0\}</m>.
      Let's see whether this a group under <m>\odot</m>.
      We remind you that <m>a \odot b</m> is defined by:
      <m>a \odot b = r</m> where <m>a,b,r\in \mathbb{Z}_n</m> and
      <m>a \cdot b = kn + r</m> where <m>k</m> an integer.)
    </p>
    <example xml:id="example_ModularArithmetic_Groupornot3">
      <statement>
        <p>
          The Cayley table for <m>\mathbb{Z}_3 \setminus \{0\}</m> is:
        </p>
        <tabular>
          <row>
            <cell><m>\odot</m></cell>
            <cell>1</cell>
            <cell>2</cell>
          </row>
          <row bottom="minor">
            <cell></cell>
            <cell></cell>
            <cell></cell>
          </row>
          <row>
            <cell>1</cell>
            <cell>1</cell>
            <cell>2</cell>
          </row>
          <row>
            <cell>2</cell>
            <cell>2</cell>
            <cell>1</cell>
          </row>
        </tabular>
        <p>
          Notice that each column has 1, meaning that each element has an inverse.
          It is also closed, associative and has an identity.
          Thus <m>\mathbb{Z}_3 \setminus \{0\}</m> is a group under <m>\odot</m>.
        </p>
      </statement>
    </example>
    <example xml:id="example_ModularArithmetic_Groupornot4">
      <statement>
        <p>
          The Cayley table for <m>\mathbb{Z}_4 \setminus \{0\}</m> is
        </p>
        <tabular>
          <row>
            <cell><m>\odot</m></cell>
            <cell>1</cell>
            <cell>2</cell>
            <cell>3</cell>
          </row>
          <row bottom="minor">
            <cell></cell>
            <cell></cell>
            <cell></cell>
            <cell></cell>
          </row>
          <row>
            <cell>1</cell>
            <cell>1</cell>
            <cell>2</cell>
            <cell>3</cell>
          </row>
          <row>
            <cell>2</cell>
            <cell>2</cell>
            <cell>0</cell>
            <cell>2</cell>
          </row>
          <row>
            <cell>3</cell>
            <cell>3</cell>
            <cell>2</cell>
            <cell>1</cell>
          </row>
        </tabular>
        <p>
          Notice that the 2 column does not have a 1 in it,
          meaning that 2 does not have an inverse in <m>\mathbb{Z}_4</m>.
          Thus, <m>\mathbb{Z}_4 \setminus \{0\}</m> is not a group under <m>\odot</m>.
        </p>
      </statement>
    </example>
    <p>
      The fact that 2 has no inverse is due to 2 being a divisor of 4.
      This makes all integer multiples of 2 to cycle between the values 0 and 2 <m>\pmod 4</m>.
    </p>
    <example xml:id="example_ModularArithmetic_Finding_a_larger_multiplicative_inverse">
      <statement>
        <p>
          Finding the multiplicative inverse in
          <m>\mathbb{Z}_n \setminus \{0\}</m> for small values of <m>n</m> is not difficult.
          But what about finding the multiplicative inverse of 3 in <m>\mathbb{Z}_{31}\setminus \{0\}</m>?
        </p>
        <p>
          Really all we're looking for is a number <m>k</m> such that <m>3k \equiv 1 \pmod {31}</m>.
          Since 31 is prime,
          it must be relatively prime to 3, meaning the gcd of 31 and 3 must be 1. 1 is a multiple of 1, so there is a solution and in fact this is just a special case of an earlier proposition.
          We convert it to a Diophantine equation:
          <me>
            3k + 31j = 1
          </me>
        </p>
        <p>
          Using the gcd algorithm, we find:
          <me>
            31+3\cdot(-10) = 1
          </me>,
          and applying <m>\pmod{31}</m> gives
          <me>
            3\cdot(-10) \equiv 1 \pmod{31}
          </me>.
        </p>
        <p>
          Finally, we use the definition of modular arithmetic to convert <m>-10</m> into a member in <m>\mathbb{Z}_{31}</m>:
          <me>
            3\cdot(21) \equiv 1 \pmod{31}
          </me>.
        </p>
      </statement>
    </example>
    <exercise xml:id="exercise_ModularArithmetic_90">
      <statement>
        <p>
          Prove or disprove that the following sets form a group by either finding a multiplicative inverse for all members,
          or by finding a member that does not have a multiplicative inverse.
          <ol type="a">
            <li>
              <p>
                <m>\mathbb{Z}_5\setminus \{0\}</m>
              </p>
            </li>
            <li>
              <p>
                <m>\mathbb{Z}_7\setminus \{0\}</m>
              </p>
            </li>
            <li>
              <p>
                <m>\mathbb{Z}_9\setminus \{0\}</m>
              </p>
            </li>
            <li>
              <p>
                Make a conjecture for which sets
                <m>\mathbb{Z}_n \setminus \{0\}</m> form a group under multiplication.
              </p>
            </li>
          </ol>
        </p>
      </statement>
    </exercise>
    <proposition xml:id="proposition_ModularArithmetic_Groupornotp">
      <statement>
        <p>
          If <m>p</m> is a prime number,
          then all elements in <m>\mathbb{Z}_p \setminus \{0\}</m> have an inverse under multiplication mod <m>p</m>.
        </p>
      </statement>
    </proposition>
    <proof>
      <p>
        Let <m>a,p</m> be known integers where <m>a \lt p</m> and <m>p</m> is prime.
        There exists an inverse to <m>a</m> under multiplication <m>\pmod p</m> when there is a solution <m>k</m> to the equation
        <m>ak = 1 \pmod p</m> where <m>k</m> is an integer.
        By <xref ref="proposition_ModularArithmetic_mod_eq_solution">Proposition</xref>,
        this equation can be solved if and only if the gcd of <m>a</m> and <m>p</m> is equal to 1.
        Since <m>p</m> is prime and <m>a\lt p</m> then the gcd of <m>a</m> and <m>p</m> must be 1.
      </p>
    </proof>
    <p>
      The previous proposition is actually a special case of the following:
    </p>
    <proposition xml:id="proposition_ModularArithmetic_Units">
      <statement>
        <p>
          Let <m>n>1</m> be an integer,
          and let <m>a</m> be an element of <m>\mathbb{Z}_n \setminus \{0\}</m>.
          Then <m>a</m> has an inverse in
          <m>\mathbb{Z}_n</m> if and only if gcd(<m>a,n</m>)=1
          (that is, <m>a</m> is relatively prime to <m>n</m>).
        </p>
      </statement>
    </proposition>
    <p>
      The proof of this proposition is up to you:
    </p>
    <exercise xml:id="exercise_ModularArithmetic_93">
      <statement>
        <p>
          Let <m>n>1</m> be an integer,
          and let <m>a</m> be an element of <m>\mathbb{Z}_n \setminus \{0\}</m>.
          <ol type="a">
            <li>
              <p>
                Prove the
                <q>only if</q>
                part of <xref ref="proposition_ModularArithmetic_Units">Proposition</xref>.
                That is, prove that if <m>a</m> has an inverse in
                <m>\mathbb{Z}_n \setminus \{0\}</m> then gcd(<m>a,n</m>)=1. (*Hint*)
              </p>
            </li>
            <li>
              <p>
                Prove the
                <q>if</q>
                part of <xref ref="proposition_ModularArithmetic_Units">Proposition</xref>.
                That is, prove that if gcd(<m>a,n</m>)=1 then <m>a</m> has an inverse in <m>\mathbb{Z}_n \setminus \{0\}</m> . (*Hint*)
              </p>
            </li>
          </ol>
        </p>
      </statement>
    </exercise>
    <exercise xml:id="exercise_ModularArithmetic_94">
      <statement>
        <p>
          Show that if <m>n</m> is not prime,
          then <m>\mathbb{Z}_n\setminus \{0\}</m> is not a group under multiplication. (*Hint*)
        </p>
      </statement>
    </exercise>
  </subsection>
  <subsection xml:id="subset_ModularArithmetic_ChineseRemainderTheorem">
    <title>Chinese remainder theorem</title>
    <p>
      We now are experts at finding solutions to congruences of the form <m>ax \equiv c \pmod b</m>.
      But what about multiple congruences?
      Take for example:
      <me>
        x \equiv 4 \pmod 7; \qquad x \equiv 5 \pmod 9
      </me>.
    </p>
    <p>
      Can we find an <m>x</m> that solves both at the same time?
    </p>
    <p>
      The first-century Chinese mathematician Sun Zi considered problems like this,
      and was able to come up with a general method of solution.
      His result is now known as the <term>Chinese Remainder Theorem</term>.
          <idx><h>Chinese Remainder Theorem</h></idx>
    </p>
    <p>
      We may apply Sun Zi's solution
      (expressed in modern algebraic language)
      to our particular case as follows.
      For the first congruence we have the general solution <m>x=4+7k</m>,
      where <m>k</m> is any integer in <m>\mathbb{Z}</m>.
      If we substitute <m>4+7k</m> for <m>x</m> in the second congruence, we get:
      <me>
        4+7k \equiv 5 \pmod 9 \implies 7k \equiv 1 \pmod 9
      </me>.
    </p>
    <p>
      At this point we could use the Euclidean algorithm to find <m>k</m>.
      But it's often easier to use the trial-and-error methods that we developed earlier.
      In this case,
      the method amounts to adding multiples of 9 to the right-hand side until you get something that is divisible by 7.
      In this case, we find:
      <me>
        7k \equiv 1 + 3\cdot 9 \pmod 9 \implies 7k \equiv 28 \pmod 9 \implies k \equiv 4 \pmod 9
      </me>.
    </p>
    <p>
      This means <m>k = 9j + 4</m> for some integer <m>j</m>.
      We substitute <m>9j + 4</m> for <m>k</m> back into <m>x=4+7k</m> to get:
      <me>
        x = 4 + 7(9j + 4) = 4 + 63j + 28 = 32 + 63j
      </me>.
    </p>
    <p>
      So the answer must be <m>x \equiv 32 \pmod {63}</m> When we check,
      <m>32 = 9 \cdot 3 + 5 = 7 \cdot 4 + 4</m> and
      <m>95 = 9 \cdot 10 + 5 = 7 \cdot 13 + 4</m> and indeed that is the case.
      Notice the ending modulus was the least common multiple of the first and second modulus (7 and 9, respectively) in the original set of modular equations.
    </p>
    <p>
      Now, not all multiple congruences have an answer.
      Take the following pair of congruences:
      <me>
        x \equiv 3 \pmod 4; \qquad x \equiv 4 \pmod 6
      </me>.
    </p>
    <p>
      We follow the same pattern.
      There is a solution for the first congruence
      <m>x = 4k + 3</m> where <m>k</m> is any integer.
      Plug this into the second congruence to yield:
      <me>
        4k + 3 \equiv 4 \pmod 6 \implies 4k \equiv 1 \pmod 6
      </me>.
    </p>
    <p>
      From the Euclidean algorithm,
      we know there is a solution to this congruence if and only if gcd<m>(4,6) = 1</m>,
      but we know gcd<m>(4,6) = 2</m>.
      Therefore there is no solution.
    </p>
    <exercise xml:id="exercise_ModularArithmetic_91">
      <statement>
        <p>
          Solve the following pairs of congruences or show that they have no common solution:
          <ol type="a">
            <li>
              <p>
                <m>x \equiv 2 \pmod{3}; x \equiv 3 \pmod{4}</m>.
              </p>
            </li>
            <li>
              <p>
                <m>x \equiv 12 \pmod{23}; x \equiv 7 \pmod{11}</m>.
              </p>
            </li>
            <li>
              <p>
                <m>x \equiv 3 \pmod{13}; x \equiv 20 \pmod{31}</m>.
              </p>
            </li>
            <li>
              <p>
                <m>x \equiv 2 \pmod{6}; x \equiv 56 \pmod{72}</m>.
              </p>
            </li>
          </ol>
        </p>
      </statement>
    </exercise>
    <exercise xml:id="exercise_ModularArithmetic_congruence">
      <statement>
        <ol type="a">
          <li>
            <p>
              Find a pair of congruences of the form:
              <m>x \equiv a \pmod{9};~~x \equiv b \pmod{15}</m> that have no common solution.
            </p>
          </li>
          <li>
            <p>
              Given congruences of the form
              <me>
                ax \equiv b \pmod{3}; \qquad cx \equiv d \pmod{7}
              </me>
              which both have solutions.
              Show that  common solutions also exist. (*Hint*)
            </p>
          </li>
          <li>
            <p>
              Prove the following: Given a pair of congruences
              <me>
                ax \equiv b \pmod{m}; \qquad cx \equiv d \pmod{n}
              </me>
              which both have solutions, such that gcd(<m>m,n</m>)=1.
              Then the congruences also have a common solution. (*Hint*)
            </p>
          </li>
          <li>
            <p>
              Prove the following: Given a pair of congruences
              <me>
                x \equiv b \pmod{m}; \qquad x \equiv d \pmod{n}
              </me>.
              such that gcd(<m>m,n</m>)=1.
              Then there exist common solutions to both congruences;
              and all common solutions are congruent mod <m>mn</m>. (*Hint*)
            </p>
          </li>
        </ol>
      </statement>
    </exercise>
    <p>
      We can use the same method to solve any number of simultaneous congruences.
      Take for example:
      <me>
        x \equiv 4 \pmod 7;  x \equiv 5 \pmod 9;  x \equiv 1 \pmod 2
      </me>.
    </p>
    <p>
      From the above example we know the general solution for the first two congruences is <m>x \equiv 32 \pmod {63}</m>.
      So we need to solve:
      <me>
        x \equiv 32 \pmod {63}; \qquad x \equiv 1 \pmod 2
      </me>
    </p>
    <p>
      We solve this by the same process as before:
      <md>
        <mrow>x = 1 + 2k \amp \implies 1 + 2k \equiv 32 \pmod {63} \implies 2k \equiv 31 \pmod {63}</mrow>
        <mrow>\amp \implies 2k \equiv 31+63 \pmod {63} \implies 2k \equiv 94 \pmod {63}</mrow>
        <mrow>\amp \implies k \equiv 47 \pmod {63}</mrow>
      </md>.
    </p>
    <p>
      Substitute to obtain <m>x = 1 + 2(47+ 63j) = 95 + 126j \equiv 95 \pmod{126}</m>..
    </p>
    <exercise xml:id="exercise_ModularArithmetic_m534">
      <statement>
        <p>
          Solve the following sets of congruences or show that they do not have a solution:
          <ol type="a">
            <li>
              <p>
                <m>x \equiv 2 \pmod{3}; x \equiv 3 \pmod{4}; x \equiv 4 \pmod{5}</m>.
              </p>
            </li>
            <li>
              <p>
                <m>x \equiv 12 \pmod{23}; x \equiv 7 \pmod{11}; x \equiv 3 \pmod{4}</m>.
              </p>
            </li>
          </ol>
        </p>
      </statement>
    </exercise>
  </subsection>
</section>