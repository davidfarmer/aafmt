<section xml:id="sec_ErrorAndCorrectionCode_Definitions">
  <title>Definitions and basic properties</title>
  <p>
    Let's examine a simple model of a communications system for transmitting and receiving coded messages
    (<xref ref="encoding">Figure</xref>).
  </p>
  <figure xml:id="encoding">
    <caption>Encoding and decoding messages</caption>
    <image width="73%" source="images/simpleCommModel.png"/>
  </figure>
  <p>
    Uncoded messages consist of a sequence of symbols,
    such as letters or characters.
    Now when computers do calculations they can't understand letters:
    they can only understand sequences consisting of 0's and 1's (0 and 1 are referred to as binary digits or <term>bits</term>).
    So before coding,
    individual symbols are re-expressed as sequences of binary bits,
    and then these bits are strung together to form a single sequence of bits which expresses the message content.
    This sequence is divided up into chunks
    (or tuples)
    of <m>m</m> bits apiece:
    these binary <m>m</m>-tuples are referred to as
    <term>message words</term>.
    Message words are then encoded into <term>codewords</term>
        <idx><h>Codeword</h></idx>
    of <m>n</m> bits apiece by a device called an <term>encoder</term>.
        <idx><h>Encoder</h></idx>
    These codewords are transmitted over a channel and received by a receiver.
    Random noise in this transmission process causes some of the bits to be corrupted:
    and we say that an <term>error</term>
        <idx><h>Error</h></idx>
    occurs every time a bit is changed from 0 to 1 or vice-versa due to transmission noise.The <term>decoder</term>
    converts each received <m>n</m>-tuple into a message word or gives an error message for that <m>n</m>-tuple.
    If the recieved codeword was not corrupted by random noise during transmission,
    then the decoded message word will agree with the original message word.
    For received words that are not codewords,
    the decoding scheme will give an error indication, or
    (in the case of error-correcting codes)
    will try to correct the error and reconstruct the original message word.
    The goal is to transmit error-free messages as cheaply and quickly as possible.
  </p>
  <exercise>
    <statement>
      <p>
        Why is the following encoding scheme not acceptable?
        <me>
          \begin{array}{lcccccccccc} \hline \mbox{Information:}  \amp  0 \amp  1 \amp  2 \amp  3 \amp  4 \amp  5 \amp  6 \amp  7 \amp  8 \amp \\ \hline \mbox{Codeword:}  \amp  000 \amp  001 \amp  010 \amp  011 \amp  101 \amp  110 \amp  111 \amp  000 \amp  001 \\ \hline \end{array}
        </me>
      </p>
    </statement>
  </exercise>
  <example xml:id="example_ErrorAndCorrectionCode_evenParity">
    <statement>
      <p>
        <term>Even parity</term><idx><h>Even parity</h><h>coding scheme</h></idx> is a commonly used coding scheme, which
        (as we shall see)
        can be generalized to form powerful and versatile codes.
        Computers use the ASCII (American Standard Code for Information Interchange) coding system to encode the letters and special characters that appear on your keyboard
        (these may be considered as the "message words", according to the above terminology).
        There are 128 of these characters,
        so it is possible to represent them using 7 bits
        (since <m>128 = 2^7</m>).
        For example, the 7-bit representations for A, B, and C are
        <md>
          <mrow>\textrm{A}  \amp  = 1000001,</mrow>
          <mrow>\textrm{B}  \amp  = 1000010,</mrow>
          <mrow>\textrm{C}  \amp  =  1000011</mrow>
        </md>.
      </p>
      <p>
        Although 7 bits are sufficient,
        the ASCII code uses 8 bits for each charater.
        A bit is added to the front of the codeword according to the following rule:
        if the number of 1's in the seven-bit representation is even,
        then the front bit is 0;
        otherwise, the front bit is 1.
        According to this rule, the 8-bit codes for A, B, and C now become
        <md>
          <mrow>\textrm{A}  \amp  = \amp  01000001,</mrow>
          <mrow>\textrm{B}  \amp  = \amp  01000010,</mrow>
          <mrow>\textrm{C}  \amp  = \amp  11000011</mrow>
        </md>.
      </p>
      <p>
        Notice that these 8-bit codes all have an
        <em>even</em> number of 1's.
      </p>
      <p>
        Now suppose an A is sent and a transmission error in the sixth bit is caused by noise over the communication channel so that (01000101) is received.
        We know an error has occurred since the received word has an odd number of 1's, and we can now request that the codeword be transmitted again.
        When used for error checking,
        the leftmost bit is called a <term>parity check bit</term>.
            <idx><h>Parity</h><h>parity check bit</h></idx>
      </p>
      <p>
        Adding a parity check bit allows the detection of all single errors because changing a single bit either increases or decreases the number of 1's by one,
        and in either case the parity has been changed from even to odd,
        so the new word is not a codeword.
        (We could equally well construct an error detection scheme based on <term>odd parity</term>,
            <idx><h>Parity</h><h>odd</h></idx>
        where the parity check bit is set so that codewords always have an odd number of 1's.)
      </p>
    </statement>
  </example>
  <p>
    The even parity system is easy to implement, but has two drawbacks.
    First, multiple errors are not detectable.
    Suppose an A is sent and the first and seventh bits are changed from 0 to 1.
    The received word is a codeword,
    but will be decoded into a C instead of an A. Second,
    we do not have the ability to correct errors.
    If the 8-tuple (10011000) is received,
    we know that an error has occurred,
    but we have no idea which bit has been changed.
    We will now investigate a coding scheme that will not only allow us to detect transmission errors but will actually correct the errors.
  </p>
  <example xml:id="example_ErrorAndCorrectionCode_bit3">
    <statement>
      <p>
        Suppose that our original message is either a 0 or a 1, and that 0 encodes to (000) and 1 encodes to (111).
        If only a single error occurs during transmission,
        we can detect and correct the error.
        For example, if a 101 is received,
        then the second bit must have been changed from a 1 to a 0.
        The originally transmitted codeword must have been (111).
        This method will detect and correct all single errors.
      </p>
      <p>
        In <xref ref="ErrorAndCorrectionCode_table0">Table</xref>,
        we present all possible words that might be received for the transmitted codewords (000) and (111).
        <xref ref="ErrorAndCorrectionCode_table0">Table</xref>
        also shows the number of bits by which each received 3-tuple differs from each original codeword.
      </p>
      <table xml:id="ErrorAndCorrectionCode_table0">
        <title>A repetition code</title>
        <tabular>
          <row bottom="minor">
            <cell></cell>
            <cell></cell>
            <cell></cell>
            <cell></cell>
            <cell></cell>
            <cell></cell>
            <cell></cell>
            <cell></cell>
            <cell></cell>
            <cell></cell>
          </row>
          <row>
            <cell></cell>
            <cell></cell>
            <cell>Received Word</cell>
          </row>
          <row>
            <cell></cell>
            <cell></cell>
            <cell>000</cell>
            <cell>001</cell>
            <cell>010</cell>
            <cell>011</cell>
            <cell>100</cell>
            <cell>101</cell>
            <cell>110</cell>
            <cell>111</cell>
          </row>
          <row bottom="minor">
            <cell></cell>
            <cell></cell>
            <cell></cell>
            <cell></cell>
            <cell></cell>
            <cell></cell>
            <cell></cell>
            <cell></cell>
            <cell></cell>
            <cell></cell>
          </row>
          <row>
            <cell>Transmitted</cell>
            <cell>000</cell>
            <cell>0</cell>
            <cell>1</cell>
            <cell>1</cell>
            <cell>2</cell>
            <cell>1</cell>
            <cell>2</cell>
            <cell>2</cell>
            <cell>3</cell>
          </row>
          <row>
            <cell>Codeword</cell>
            <cell>111</cell>
            <cell>3</cell>
            <cell>2</cell>
            <cell>2</cell>
            <cell>1</cell>
            <cell>2</cell>
            <cell>1</cell>
            <cell>1</cell>
            <cell>0</cell>
          </row>
          <row bottom="minor">
            <cell></cell>
            <cell></cell>
            <cell></cell>
            <cell></cell>
            <cell></cell>
            <cell></cell>
            <cell></cell>
            <cell></cell>
            <cell></cell>
            <cell></cell>
          </row>
        </tabular>
      </table>
      <p>
        This triple-repetition method <idx><h>Repetition</h><h>encoding</h></idx>
        will automatically detect and correct all single errors,
        but it's not very efficient
        (just imagine having to repeat everything you say three times in order to make yourself understood!)
        We'll see shortly that there are much better alternatives.
      </p>
    </statement>
  </example>
</section>