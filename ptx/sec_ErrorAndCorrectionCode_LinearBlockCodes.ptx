<section xml:id="sec_ErrorAndCorrectionCode_LinearBlockCodes">
  <title>Linear Block Codes</title>
  <p>
    Using <xref ref="proposition_ErrorAndCorrectionCode_GroupCodeMinDist">Proposition</xref>,
    it is now a simple matter to find the error detection and correction capabilities of a group code.
    However, so far we don't have a good method for creating group codes.
    In this section,
    we will use some techniques from linear algebra to give one such method.
    This method is widely used in digital information processing:
    for instance, in CDs, DVDs, and satellite communications.
  </p>
  <p>
    To understand this section,
    readers should familiar with basic notions of linear algebra such as systems of linear equations, vectors,
    linear combination, matrix multiplication, and transpose.
    Readers may find a brief refresher on matrix multiplication in <xref ref="SigmaNotation">Chapter</xref>.
  </p>
  <definition>
    <statement>
      <p>
        {innerProduct} The <term>inner product</term>
            <idx><h>Inner product</h></idx>
        of two binary <m>n</m>-tuples is
        <me>
          (x_1, x_2, \ldots, x_n) \cdot (y_1, y_2, \ldots, y_n) \equiv x_1 y_1 + \cdots + x_n y_n ~(\mathrm{mod~}2)
        </me>.
      </p>
      <p>
        For example,
        <m>(011001) \cdot (110101) = 0+1+0+0+0+1 \equiv 0</m>
        (mod <m>2</m>).
      </p>
      <p>
        (The astute reader will recognize this definition from our discussion of UPC codes in <xref ref="sec_ModularArithmetic_ModularEquations">Section</xref>).
      </p>
    </statement>
  </definition>
  <p>
    <em>Note</em> the difference between inner product and weight.
    When computing the weight of a codeword,
    the entries are added using ordinary addition.
    However, when computing the inner product in <m>{\Bbb Z_2^n}</m>,
    the terms are added with mod 2 addition.
  </p>
  <p>
    We can also look at an inner product as the matrix product of a row vector with a column vector.
    Recall that transpose
    (denoted by
    <q>T</q>
    )
    changes a row vector into a column vector with the same entries in the same order.
    Then we have
    <md>
      <mrow>{\bold x} \cdot {\bold y} \amp  = \amp  {\bold x}  {\bold y}^{ T}</mrow>
      <mrow>\amp  = \amp \left( \begin{array}{cccc} x_1 \amp  x_2 \amp  \cdots \amp  x_n \end{array} \right) \left( \begin{array}{c} y_1 \\ y_2 \\ \vdots \\ y_n \end{array} \right)</mrow>
      <mrow>\amp  = \amp x_{1}y_{1} + x_{2}y_{2} + \cdots + x_{n}y_{n}</mrow>
    </md>.
  </p>
  <p>
    Again, we emphasize the addition here is mod 2 addition.
  </p>
  <example xml:id="example_ErrorAndCorrectionCode_ParityCheck0">
    <statement>
      <p>
        Suppose that the words to be encoded consist of all binary 3-tuples,
        and that our encoding scheme is even-parity.
        To encode an arbitrary 3-tuple,
        we add a fourth bit to obtain an even number of 1's.
        Notice that an arbitrary <m>n</m>-tuple
        <m>{\bold x} = (x_1, x_2, \ldots,
        x_n)</m> has an even number of 1's exactly when <m>x_1 + x_2 + \cdots + x_n = 0</m>;
        hence, a 4-tuple <m>{\bold x} = (x_1, x_2, x_3, x_4)</m> has an even number of 1's if <m>x_1+ x_2+ x_3+ x_4 = 0</m>, or
        <me>
          {\bold 1} \cdot {\bold x} = {\bold 1} {\bold x}^{ T} = \left( \begin{array}{cccc} 1 \amp  1 \amp  1 \amp  1 \end{array} \right) \left( \begin{array}{c} x_1 \\ x_2 \\ x_3 \\ x_4 \end{array} \right) = 0
        </me>.
      </p>
    </statement>
  </example>
  <p>
    <xref ref="example_ErrorAndCorrectionCode_ParityCheck0">Example</xref>
    shows that an even-parity codeword can be verified by an inner product,
    which is a special case of a matrix multiplication.
    We will now show that codewords in other types of group codes can also be verified by matrix multiplication.
    But first, as usual, a definition:
  </p>
  <definition>
    <statement>
      <p>
        {MknZ2} Let <m>{\Bbb M}_{k \times n}(\mathbb{Z}_2)</m> denote the set of all
        <m>k \times n</m> matrices with entries in <m>\mathbb{Z}_2</m>.
        We do matrix operations as usual except that all our addition and multiplication operations occur in <m>\mathbb{Z}_2</m>.
        Define the <term>null space</term><idx><h>Matrix</h><h>null space of</h></idx>
            <idx><h>Null space</h><h>of a matrix</h></idx>
        of a matrix <m>H \in {\Bbb M}_{k \times n}(\mathbb{Z}_2)</m> to be the set of all binary <m>n</m>-tuples
        <m>{\bold x}</m> such that <m>H{\bold x}^{ T} = {\bold 0}</m>.
        We denote the null space of a matrix <m>H</m> by <m>{ Null}(H)</m>.
      </p>
    </statement>
  </definition>
  <example xml:id="example_ErrorAndCorrectionCode_FirstGroupCode">
    <statement>
      <p>
        Suppose that
        <me>
          H = \left( \begin{array}{ccccc} 0 \amp  1 \amp  0 \amp  1 \amp  0 \\ 1 \amp  1 \amp  1 \amp  1 \amp  0 \\ 0 \amp  0 \amp  1 \amp  1 \amp  1 \end{array} \right)
        </me>.
      </p>
      <p>
        For a 5-tuple <m>{\bold x} = (x_1, x_2, x_3, x_4, x_5)</m> to be in the null space of <m>H</m> it must satisfy <m>H{\bold x}^\textrm{T} = {\bold 0}</m>.
      </p>
      <p>
        This means that,
        <me>
          \left( \begin{array}{ccccc} 0 \amp  1 \amp  0 \amp  1 \amp  0 \\ 1 \amp  1 \amp  1 \amp  1 \amp  0 \\ 0 \amp  0 \amp  1 \amp  1 \amp  1 \end{array} \right)\cdot \left( \begin{array}{c} x_1 \\ x_2\\ x_3\\ x_4\\ x_5 \end{array} \right) = \left( \begin{array}{c} 0\\ 0\\ 0\\ 0\\ 0 \end{array} \right)
        </me>
      </p>
      <p>
        So the following system of equations must be satisfied (note that
        <q>+</q>
        is binary addition):
        <md>
          <mrow>x_2 + x_4   \amp  = \amp  0</mrow>
          <mrow>x_1 + x_2 + x_3 + x_4  \amp  = \amp  0</mrow>
          <mrow>x_3 + x_4 + x_5 \amp  = \amp  0</mrow>
        </md>.
      </p>
      <p>
        This set of equations may be solved using conventional methods such as substitution or elimination
        (remember to use binary arithmetic!).
        Since there are more variables than equations,
        there is more than one solution.
        Here we use Gaussian elimination to obtain our solutions.
      </p>
      <p>
        First we have,
        <md>
          <mrow>x_2 + x_4   \amp  = \amp  0</mrow>
          <mrow>x_1 + x_2 + x_3 + x_4  \amp  = \amp  0</mrow>
          <mrow>x_3 + x_4 + x_5 \amp  = \amp  0</mrow>
        </md>
      </p>
      <p>
        Then we switch the first and second equations to obtain the following system.
        <md>
          <mrow>x_1 + x_2 + x_3 + x_4  \amp  = \amp  0</mrow>
          <mrow>x_2 + x_4   \amp  = \amp  0</mrow>
          <mrow>x_3 + x_4 + x_5 \amp  = \amp  0</mrow>
        </md>
      </p>
      <p>
        Then we replace the first equation with the sum of the first two equations.
        <md>
          <mrow>x_1 + x_3  \amp  = \amp  0</mrow>
          <mrow>x_2 + x_4  \amp  = \amp  0</mrow>
          <mrow>x_3 + x_4 + x_5 \amp  = \amp  0</mrow>
        </md>
      </p>
      <p>
        Finally, we replace the first equation with the sum of the first and third equations to obtain the following system.
        <md>
          <mrow>x_1 + x_4  + x_5 \amp  = \amp  0</mrow>
          <mrow>x_2 + x_4  \amp  = \amp  0</mrow>
          <mrow>x_3 + x_4 + x_5 \amp  = \amp  0</mrow>
        </md>.
      </p>
      <p>
        Solving for <m>x_1</m>, <m>x_2</m>,
        and <m>x_3</m> we have the following dependent solutions,
        <md>
          <mrow>x_1 \amp =\amp  - x_4  + (- x_5)</mrow>
          <mrow>x_2 \amp =\amp  - x_4</mrow>
          <mrow>x_3 \amp =\amp  - x_4 + (-x_5)</mrow>
        </md>.
      </p>
      <p>
        Now since we are working in <m>\mathbb{Z}_2^5</m>, <m>-1\equiv1</m>.
        Therefore, we have the following dependent equations.
        <md>
          <mrow>x_1 \amp =\amp  x_4  + x_5</mrow>
          <mrow>x_2 \amp =\amp   x_4</mrow>
          <mrow>x_3 \amp =\amp   x_4 + x_5</mrow>
        </md>.
      </p>
      <p>
        Notice that <m>x_1</m> and <m>x_3</m> both depend on <m>x_4</m> and <m>x_5</m>.
        Also <m>x_2</m> depends on <m>x_4</m>.
        In this case, <m>x_1</m>, <m>x_2</m>,
        and <m>x_3</m> are called <em>pivot variables</em>
        and <m>x_4</m> and <m>x_5</m> are called
        <em>free variables</em>.The free variables can take on values of 0 or 1, since we are working in <m>\mathbb{Z}_2^5</m>.
        Because the free variables can take on two values,
        the number of solutions is equal to <m>2^k</m>,
        where <m>k</m> is the number of free variables.
        So we should get four solutions.
      </p>
      <p>
        If <m>x_4=1</m> and <m>x_5=1</m>,
        then we substitute those values into our system and use binary addition to find that <m>x_1=0</m>,
        <m>x_2=1</m>, and <m>x_3=0</m>.
        So one solution is <m>(x_1,x_2,x_3,x_4,x_5) = (0,1,0,1,1)</m>.
        Likewise, if <m>x_4=1</m> and <m>x_5=0</m>,
        then we have as a solution
        <m>(x_1,x_2,x_3,x_4,x_5) = (1,1,1,1,0)</m> and if <m>x_4=0</m> and <m>x_5=1</m>,
        we have <m>(x_1,x_2,x_3,x_4,x_5) = (1,0,1,0,1)</m>.
        Finally, if <m>x_4=0</m> and <m>x_5=0</m>,
        then we have as a solution <m>(x_1,x_2,x_3,x_4,x_5) = (0,0,0,0,0)</m>.
      </p>
      <p>
        So the set of all solutions is
        <me>
          \{(0,0,0,0,0),(1,1,1,1,0), (1,0,1,0,1), (0,1,0,1,1)\}
        </me>.
      </p>
      <p>
        This code is easily determined to be a group code
        (for example, by constructing the Cayley table).
      </p>
      <p>
        (You may have noticed that the solution set is finite,
        unlike similar systems of linear equations that you may have seen in linear algebra.
        Indeed the solution set must be finite,
        because the set of vectors in <m>\mathbb{Z}_2^5</m> is finite.
        The difference is that we're now dealing with <m>\mathbb{Z}_2^n</m> rather than
        <m>\mathbb{R}^n</m> or <m>\mathbb{C}^n</m>.)
      </p>
    </statement>
  </example>
  <p>
    Let's do another example in
    <m>\mathbb{Z}_2^n</m> , but this time in <m>\mathbb{Z}_2^4</m>.
  </p>
  <example>
    <statement>
      <p>
        Suppose that
        <me>
          H = \left( \begin{array}{cccc} 1 \amp  0 \amp  1 \amp  1 \\ 1 \amp  1 \amp  1 \amp   0 \end{array} \right)
        </me>.
      </p>
      <p>
        For a 4-tuple <m>{\bold x} = (x_1, x_2, x_3, x_4)</m> to be in the null space of <m>H</m> it must satisfy <m>H{\bold x}^\textrm{T} = {\bold 0}</m>.
      </p>
      <p>
        This means that,
        <me>
          \left( \begin{array}{cccc} 1 \amp  0 \amp  1 \amp  1 \\ 1 \amp  1 \amp  1 \amp   0 \end{array} \right)\cdot \left( \begin{array}{c} x_1 \\ x_2\\ x_3\\ x_4 \end{array} \right) = \left( \begin{array}{c} 0\\ 0\\ 0\\ 0 \end{array} \right)
        </me>
      </p>
      <p>
        So the following system of equations must be satisfied.
        <md>
          <mrow>x_1 + x_3 + x_4   \amp  = \amp  0</mrow>
          <mrow>x_1 + x_2 + x_3   \amp  = \amp  0</mrow>
        </md>.
      </p>
      <p>
        We proceed again with Gaussian elimination and replace the second equation with the sum of the two equations to obtain the following system.
        <md>
          <mrow>x_1 + x_3 + x_4   \amp  = \amp  0</mrow>
          <mrow>x_2 + x_4 \amp  = \amp  0</mrow>
        </md>.
      </p>
      <p>
        Solving for <m>x_1</m> and <m>x_2</m>,
        and replacing {-1} with its modular equivalent, {1}, we have the following dependent solutions,
        <md>
          <mrow>x_1 \amp =\amp   x_3  +  x_4</mrow>
          <mrow>x_2 \amp =\amp   x_4 </mrow>
        </md>.
      </p>
      <p>
        Notice that there are two free variables <m>x_3</m> and <m>x_4</m>.
        Therefore, there are <m>2^2=4</m> solutions.
        If <m>x_3=1</m> and <m>x_4=1</m>,
        then <m>x_1=0</m>, <m>x_2=1</m>.
        So one solution is <m>(x_1,x_2,x_3,x_4,x_5) = (0,1,1,1)</m>.
        Likewise, if <m>x_3=1</m> and <m>x_4=0</m>,
        then we have as a solution
        <m>(x_1,x_2,x_3,x_4,x_5) = (1,0,1,0)</m> and if <m>x_3=0</m> and <m>x_4=1</m>,
        we have <m>(x_1,x_2,x_3,x_4,x_5) = (1,1,0,1)</m>.
        Finally, if <m>x_3=0</m> and <m>x_4=0</m>,
        then we have as a solution <m>(x_1,x_2,x_3,x_4,x_5) = (0,0,0,0)</m>.
      </p>
      <p>
        So the set of all solutions is
        <me>
          \{(0,0,0,0),(1,1,0,1), (1,0,1,0), (0,1,1,1)\}
        </me>.
      </p>
    </statement>
  </example>
  <exercise xml:id="exercise_ErrorAndCorrectionCode_LinearCodes">
    <statement>
      <p>
        Compute the null space of each of the following matrices.
        In cases (a) and (b), show that the result is a group code.
      </p>
      <sidebyside>
        <ul>
          <li>
            <title>\textbf{(a)}</title>
            <p>
              <me>
                \left( \begin{array}{ccccc} 0 \amp  1 \amp  0 \amp  0 \amp  0 \\ 1 \amp  0 \amp  1 \amp  0 \amp  1 \\ 1 \amp  0 \amp  0 \amp  1 \amp  0 \end{array} \right)
              </me>
            </p>
          </li>
        </ul>
        <ul>
          <li>
            <title>\textbf{(b)}</title>
            <p>
              <me>
                \left( \begin{array}{cccccc} 1 \amp  0 \amp  1 \amp  0 \amp  0 \amp  0 \\ 1 \amp  1 \amp  0 \amp  1 \amp  0 \amp  0 \\ 0 \amp  1 \amp  0 \amp  0 \amp  1 \amp  0 \\ 1 \amp  1 \amp  0 \amp  0 \amp  0 \amp  1 \end{array} \right)
              </me>
            </p>
          </li>
        </ul>
      </sidebyside>
      <sidebyside>
        <ul>
          <li>
            <title>\textbf{(c)}</title>
            <p>
              <me>
                \left( \begin{array}{ccccc} 1 \amp  0 \amp  0 \amp  1 \amp  1 \\ 0 \amp  1 \amp  0 \amp  1 \amp  1 \end{array} \right)
              </me>
            </p>
          </li>
        </ul>
        <ul>
          <li>
            <title>\textbf{(d)}</title>
            <p>
              <me>
                \left( \begin{array}{ccccccc} 0 \amp  0 \amp  0 \amp  1 \amp  1 \amp  1 \amp  1 \\ 0 \amp  1 \amp  1 \amp  0 \amp  0 \amp  1 \amp  1 \\ 1 \amp  0 \amp  1 \amp  0 \amp  1 \amp  0 \amp  1 \\ 0 \amp  1 \amp  1 \amp  0 \amp  0 \amp  1 \amp  1 \end{array} \right)
              </me>
            </p>
          </li>
        </ul>
      </sidebyside>
    </statement>
  </exercise>
  <p>
    <xref ref="example_ErrorAndCorrectionCode_FirstGroupCode">Example</xref>
    shows a case where the null space of a matrix with entries in
    <m>\mathbb{Z}_2</m> turns out to be a group code.
    In fact, the null space of such a matrix is
    <em>always</em> a group code:
  </p>
  <proposition>
    <statement>
      <p>
        Let <m>H</m> be in <m>\mathbb{M}_{k \times n}(\mathbb{Z}_2)</m>.
        Then the null space of <m>H</m> is a group<nbsp/>code.
            <idx><h>Group code</h></idx>
      </p>
    </statement>
  </proposition>
  <proof>
    <p>
      As mentioned previously,
      to show that <m>{ Null}(H)</m> is a group code we just need to show that it's closed under the group operation +. Let
      <m>{\bold x}, {\bold y} \in { Null}(H)</m> for some matrix <m>H</m> in <m>\mathbb{M}_{k \times n}(\mathbb{Z}_2)</m>.
      Then <m>H{\bold x}^{\mathrm{T}} = {\bold 0}</m> and <m>H{\bold y}^{\mathrm{T}} = {\bold 0}</m>.
      So
      <me>
        H({\bold x}+{\bold y})^{\mathrm{T}} = H({\bold x}^{\mathrm{T}} +{\bold y}^{\mathrm{T}}) = H{\bold x}^{\mathrm{T}} + H{\bold y}^{\mathrm{T}} = {\bold 0} + {\bold 0} = {\bold 0}
      </me>.
    </p>
    <p>
      Hence, <m>{\bold x}+{\bold y}</m> is in the null space of <m>H</m> and therefore must be a codeword.
    </p>
  </proof>
  <p>
    We give a special name to group codes that are obtained as null spaces:
  </p>
  <definition>
    <statement>
      <p>
        {linearCode} A code is a <term>linear code</term>
            <idx><h>Code</h><h>linear</h></idx>
        if it is determined by the null space of some matrix <m>H \in \mathbb{M}_{k \times n}(\mathbb{Z}_2)</m>.
      </p>
    </statement>
  </definition>
  <p>
    <em>Note</em> that at this point,
    all we know is that linear codes are group codes <mdash/> we haven't yet proven that all group codes in
    <m>\mathbb{Z}_2^n</m> are linear codes (although this turns out to be true also!)
  </p>
  <example xml:id="example_ErrorAndCorrectionCode_SevenTuple">
    <statement>
      <p>
        Let <m>C</m> be the code given by the matrix
        <me>
          H = \left( \begin{array}{cccccc} 0 \amp  0 \amp  0 \amp  1 \amp  1 \amp  1 \\ 0 \amp  1 \amp  1 \amp  0 \amp  1 \amp  1 \\ 1 \amp  0 \amp  1 \amp  0 \amp  0 \amp  1 \end{array} \right)
        </me>.
      </p>
      <p>
        Suppose that the 7-tuple <m>{\bold x} = (0,1,0,0,1,1)</m> is received.
        It is a simple matter of matrix multiplication to determine whether or not <m>{\bold x}</m> is a codeword.
        Since
        <me>
          H{\bold x}^{\mathrm{T}} = \left( \begin{array}{c} 0 \\ 1 \\ 1 \end{array} \right)
        </me>,
        the received word is not a codeword.
        We must either attempt to correct the word or request that it be transmitted again.
      </p>
    </statement>
  </example>
  <exercise>
    <statement>
      <p>
        Which of the following are codewords for the code in <xref ref="example_ErrorAndCorrectionCode_SevenTuple">Example</xref>?
        <ol type="a">
          <li>
            <p>
              <m>(1,1,1,1,1,0)</m>
            </p>
          </li>
          <li>
            <p>
              <m>(1,0,0,0,1,1)</m>
            </p>
          </li>
          <li>
            <p>
              <m>(1,0,1,0,1,0)</m>
            </p>
          </li>
        </ol>
      </p>
    </statement>
  </exercise>
</section>