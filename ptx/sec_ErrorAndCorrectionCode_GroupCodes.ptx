<section xml:id="sec_ErrorAndCorrectionCode_GroupCodes">
  <title>Group codes<nbsp/><nbsp/></title>
  <figure>
    <video youtubeplaylist="PL2uooHqQ6T7PW5na4EX8rQX2WvBBdM8Qo"/>
  </figure>
  <p>
    So far in this book,
    we've tried to relate everything we've talked about to groups.
    Codes are no exception to this rule!
    In fact, we know that all codewords of length <m>n</m> are elements of <m>\mathbb{Z}_2^n</m>,
    which in fact turns out to be a group.
    To show this, we must first define a group operation:
  </p>
  <definition>
    <statement>
      <p>
        {group} The group <m>\mathbb{Z}_2^n</m> consists of the set of all binary <m>n</m>-tuples,
        together with an operation
        <q>+</q>
        defined as follows:
        <me>
          (x_1, \ldots, x_n) +  (y_1, \ldots, y_n) = (x_1 \oplus y_1, \ldots, x_n \oplus y_n)
        </me>,
        where
        <q><m>\oplus</m></q>
        means addition mod 2.
      </p>
    </statement>
  </definition>
  <remark>
    <p>
      Please note that in the following,
      if <m>{\bold x}</m> and <m>{\bold y}</m> are binary <m>n</m>-tuples then the expression <m>{\bold x}</m> + <m>{\bold y}</m>
      <em>always</em> refers to the operation
      <q>+</q>
      defined in <xref ref="definition_ErrorAndCorrectionCode_group">Definition</xref>
      rather than ordinary addition.
      This is just one more example of the fact that in mathematics,
      the meaning of symbols is determined by the context.
    </p>
  </remark>
  <p>
    So it's time to get our hands dirty and verify that <m>\mathbb{Z}_2^n</m> is indeed a group.
  </p>
  <exercise>
    <statement>
      <ol type="a">
        <li>
          <p>
            Show that if <m>{\bold x}</m> and
            <m>{\bold y}</m> are in <m>\mathbb{Z}_2^n</m>,
            then <m>{\bold x} + {\bold y}</m> is also in <m>\mathbb{Z}_2^n</m>.
          </p>
        </li>
        <li>
          <p>
            What is the identity of <m>{\Bbb Z}_2^n</m> under the + operation?
          </p>
        </li>
        <li>
          <p>
            In <m>\mathbb{Z}_2^9</m>, what is <m>(11000101) + (11000101)</m>?
          </p>
        </li>
        <li>
          <p>
            If <m>{\bold x} \in \mathbb{Z}_2^n</m>,
            then what is <m>{\bold x} + {\bold x}</m>?
          </p>
        </li>
        <li>
          <p>
            Explain why the above results show that
            <m>\mathbb{Z}_2^n</m> is a group under the operation +.
          </p>
        </li>
        <li>
          <p>
            Is the group abelian?
            <em>Prove</em> your answer.
          </p>
        </li>
      </ol>
    </statement>
  </exercise>
  <exercise>
    <statement>
      <p>
        We may define a subtraction operation on
        <m>\mathbb{Z}_2^n</m> as we usually do on additive groups:
        namely, <m>{\bold x} - {\bold y}</m> is defined as <m>{\bold x} + {\bold y'}</m>,
        where <m>{\bold y'}</m> is the additive inverse of <m>{\bold y}</m>.
        Based on the previous exercise,
        what can you conclude about the difference between
        <m>{\bold x} - {\bold y}</m> and <m>{\bold x} + {\bold y}</m>?
      </p>
    </statement>
  </exercise>
  <p>
    It turns out that weight and Hamming distance are in some sense
    <q>compatible</q>
    with the operation + defined on <m>\mathbb{Z}_2^n</m>,
    as shown in the following proposition.
  </p>
  <proposition xml:id="proposition_ErrorAndCorrectionCode_norm">
    <statement>
      <p>
        Let <m>{\bold x}</m>, <m>{\bold y}</m>,
        and <m>{\bold z}</m> be binary <m>n</m>-tuples.
        Then
        <ol type="a">
          <li>
            <p>
              <m>w({\bold x}) = d({\bold x},{\bold 0})</m>
            </p>
          </li>
          <li>
            <p>
              <m>d({\bold x},{\bold y}) = w({\bold x}+{\bold y})</m>
            </p>
          </li>
          <li>
            <p>
              <m>d({\bold x},{\bold y}) = d({\bold x}+{\bold z},{\bold y}+{\bold z})</m>
            </p>
          </li>
        </ol>
      </p>
    </statement>
  </proposition>
  <p>
    We have already shown (a) in the definition of weight
    (<xref ref="definition_ErrorAndCorrectionCode_weight">Definition</xref>).
    Parts (b) and (c) are for you to prove:
  </p>
  <exercise xml:id="exercise_ErrorAndCorrectionCode_hamming">
    <statement>
      <ol type="a">
        <li>
          <p>
            Prove part (b) of <xref ref="proposition_ErrorAndCorrectionCode_norm">Proposition</xref>
            by using part (a) of <xref ref="proposition_ErrorAndCorrectionCode_norm">Proposition</xref>
            and the formula in <xref ref="proposition_ErrorAndCorrectionCode_HammingDistFormula">Proposition</xref>.
          </p>
        </li>
        <li>
          <p>
            Prove part (c) (*Hint*)
          </p>
        </li>
      </ol>
    </statement>
  </exercise>
  <p>
    The codes we discussed in <xref ref="sec_ErrorAndCorrectionCode_Definitions">Section</xref>
    were all subsets of <m>\mathbb{Z}_2^n</m>,
    for some positive integer <m>n</m>.
    We shall now see that codes that are also <em>subgroups</em>
    have special properties that enable efficient encoding and decoding.
    Accordingly, we define:
  </p>
  <definition>
    <statement>
      <p>
        {groupCode} A <term>group code</term>
            <idx><h>Code</h><h>group</h></idx>
            <idx><h>Group code</h></idx>
        is a set of codewords that is also a subgroup of <m>{\Bbb Z}_2^n</m>.
      </p>
    </statement>
  </definition>
  <remark>
    <p>
      At this point we are simply thinking of a group code as a set of codewords with certain properties.
      Of course, practical codes also require encoding and decoding functions:
      we'll talk about these later.
    </p>
  </remark>
  <p>
    To check that a set of codewords is a group code,
    we need only verify closure under addition.
    It turns out that identity and inverse are guaranteed by closure:
  </p>
  <exercise xml:id="exercise_ErrorAndCorrectionCode_ctns0">
    <statement>
      <ol type="a">
        <li>
          <p>
            Show that a set of codewords in
            <m>\mathbb{Z}_2^n</m> which is closed under the operation + must also contain <m>{\bold 0}</m>
          </p>
        </li>
        <li>
          <p>
            Show that any set of codewords always includes the inverses of those codewords.
          </p>
        </li>
        <li>
          <p>
            Prove that any set of codewords of length <m>n</m> that is closed under + is a subgroup of <m>\mathbb{Z}_2^n</m>.
          </p>
        </li>
      </ol>
    </statement>
  </exercise>
  <exercise>
    <statement>
      <p>
        Without doing any addition,
        explain why the following set of 4-tuples in
        <m>\mathbb{Z}_2^4</m> can't be a group code.
        <me>
          \begin{array}{cccc} (0110) \amp  (1001) \amp  (1010) \amp  (1100) \end{array}
        </me>
      </p>
    </statement>
  </exercise>
  <example xml:id="example_ErrorAndCorrectionCode_ex8">
    <statement>
      <p>
        Suppose that we have a code that consists of the following 7-tuples:
        <me>
          \begin{array}{cccc} (0000000) \amp  (0001111) \amp  (0010101) \amp  (0011010) \\ (0100110) \amp  (0101001) \amp  (0110011) \amp  (0111100) \\ (1000011) \amp  (1001100) \amp  (1010110) \amp  (1011001) \\ (1100101) \amp  (1101010) \amp  (1110000) \amp  (1111111). \end{array}
        </me>
      </p>
      <p>
        It's possible to verify directly
        (for instance, by computing the Cayley table)
        that this code is a group code
        (later we will show there are much,
        much quicker ways to do this).
        To find the minimum distance,
        one may compute the distances between all pairs of codewords.
        The result is <m>d_{\min} = 3</m>,
        so the code can detect 2 errors and correct 1 error.
      </p>
    </statement>
  </example>
  <p>
    From the previous example,
    it seems like finding the error detection/correction capabilities of a code is a long and tedious process.
    However, for group codes there is a far simpler way:
  </p>
  <proposition xml:id="proposition_ErrorAndCorrectionCode_GroupCodeMinDist">
    <statement>
      <p>
        Let <m>d_{\min}</m> be the minimum distance
            <idx><h>Minimum distance</h></idx>
        for a group code <m>C</m>.
        Then <m>d_{\min}</m> is the minimum weight <idx><h>Codeword</h><h>weight of</h></idx>
        of all nonzero codewords in <m>C</m>.
        That is,
        <me>
          d_{\min} = \min\{ w({\bold x}) : { {\bold x} \neq {\bold 0} } \}
        </me>.
      </p>
    </statement>
  </proposition>
  <proof>
    <p>
      Observe that
      <md>
        <mrow>d_{\min} \amp = \amp  \min \{ d({\bold x},{\bold y}) : {\bold x} \neq {\bold y} \}</mrow>
        <mrow>\amp = \amp  \min \{ d({\bold x},{\bold y}) : {\bold x}+{\bold y} \neq {\bold 0} \}</mrow>
        <mrow>\amp =\amp  \min\{ w({\bold x} + {\bold y}) : {\bold x}+{\bold y} \neq {\bold 0} \}</mrow>
        <mrow>\amp  = \amp  \min\{ w({\bold z}) : {\bold z} \neq {\bold 0} \}</mrow>
      </md>.
    </p>
  </proof>
  <warning>
    <p>
      <xref ref="proposition_ErrorAndCorrectionCode_GroupCodeMinDist">Proposition</xref> <em>only</em>
      applies to <em>group codes</em>,
      and not to codes in general.
    </p>
  </warning>
</section>